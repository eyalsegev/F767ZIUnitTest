
F767ZIFSUnitTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f4  080085f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085fc  080085fc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d4  20000088  0800868c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000435c  0800868c  0002435c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aac  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a80  00000000  00000000  00032b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  000355e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029378  00000000  00000000  00036ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e187  00000000  00000000  00060268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4a7c  00000000  00000000  0006e3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  00162ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	080081c0 	.word	0x080081c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	080081c0 	.word	0x080081c0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <SELECT+0x14>)
 80005fa:	f001 fd2b 	bl	8002054 <HAL_GPIO_WritePin>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <DESELECT+0x14>)
 8000612:	f001 fd1f 	bl	8002054 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000

08000620 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800062a:	bf00      	nop
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <SPI_TxByte+0x30>)
 800062e:	f003 fa2c 	bl	8003a8a <HAL_SPI_GetState>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d1f9      	bne.n	800062c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000638:	1df9      	adds	r1, r7, #7
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	2201      	movs	r2, #1
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <SPI_TxByte+0x30>)
 8000642:	f002 fea9 	bl	8003398 <HAL_SPI_Transmit>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000124c 	.word	0x2000124c

08000654 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000662:	bf00      	nop
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <SPI_RxByte+0x38>)
 8000666:	f003 fa10 	bl	8003a8a <HAL_SPI_GetState>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1f9      	bne.n	8000664 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000670:	1dba      	adds	r2, r7, #6
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <SPI_RxByte+0x38>)
 800067e:	f002 fff1 	bl	8003664 <HAL_SPI_TransmitReceive>

  return data;
 8000682:	79bb      	ldrb	r3, [r7, #6]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000124c 	.word	0x2000124c

08000690 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000698:	f7ff ffdc 	bl	8000654 <SPI_RxByte>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	701a      	strb	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <SD_ReadyWait+0x34>)
 80006b4:	2232      	movs	r2, #50	; 0x32
 80006b6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80006b8:	f7ff ffcc 	bl	8000654 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80006bc:	f7ff ffca 	bl	8000654 <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d004      	beq.n	80006d4 <SD_ReadyWait+0x28>
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SD_ReadyWait+0x34>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f3      	bne.n	80006bc <SD_ReadyWait+0x10>

  return res;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200022e4 	.word	0x200022e4

080006e4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ee:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80006f0:	f7ff ff8a 	bl	8000608 <DESELECT>

  for(int i = 0; i < 10; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	e005      	b.n	8000706 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff90 	bl	8000620 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	2b09      	cmp	r3, #9
 800070a:	ddf6      	ble.n	80006fa <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800070c:	f7ff ff70 	bl	80005f0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000710:	2340      	movs	r3, #64	; 0x40
 8000712:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000724:	2395      	movs	r3, #149	; 0x95
 8000726:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e009      	b.n	8000742 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800072e:	1d3a      	adds	r2, r7, #4
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff72 	bl	8000620 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b05      	cmp	r3, #5
 8000746:	ddf2      	ble.n	800072e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000748:	e002      	b.n	8000750 <SD_PowerOn+0x6c>
  {
    Count--;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3b01      	subs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000750:	f7ff ff80 	bl	8000654 <SPI_RxByte>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d002      	beq.n	8000760 <SD_PowerOn+0x7c>
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f4      	bne.n	800074a <SD_PowerOn+0x66>
  }

  DESELECT();
 8000760:	f7ff ff52 	bl	8000608 <DESELECT>
  SPI_TxByte(0XFF);
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	f7ff ff5b 	bl	8000620 <SPI_TxByte>

  PowerFlag = 1;
 800076a:	4b03      	ldr	r3, [pc, #12]	; (8000778 <SD_PowerOn+0x94>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000a5 	.word	0x200000a5

0800077c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <SD_PowerOff+0x14>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	200000a5 	.word	0x200000a5

08000794 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SD_CheckPower+0x14>)
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000a5 	.word	0x200000a5

080007ac <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <SD_RxDataBlock+0x68>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80007bc:	f7ff ff4a 	bl	8000654 <SPI_RxByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d104      	bne.n	80007d4 <SD_RxDataBlock+0x28>
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <SD_RxDataBlock+0x68>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2bfe      	cmp	r3, #254	; 0xfe
 80007d8:	d001      	beq.n	80007de <SD_RxDataBlock+0x32>
    return FALSE;
 80007da:	2300      	movs	r3, #0
 80007dc:	e016      	b.n	800080c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff53 	bl	8000690 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff4d 	bl	8000690 <SPI_RxBytePtr>
  } while(btr -= 2);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3b02      	subs	r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1ed      	bne.n	80007de <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000802:	f7ff ff27 	bl	8000654 <SPI_RxByte>
  SPI_RxByte();
 8000806:	f7ff ff25 	bl	8000654 <SPI_RxByte>

  return TRUE;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200022e5 	.word	0x200022e5

08000818 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000828:	f7ff ff40 	bl	80006ac <SD_ReadyWait>
 800082c:	4603      	mov	r3, r0
 800082e:	2bff      	cmp	r3, #255	; 0xff
 8000830:	d001      	beq.n	8000836 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000832:	2300      	movs	r3, #0
 8000834:	e040      	b.n	80008b8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fef1 	bl	8000620 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	2bfd      	cmp	r3, #253	; 0xfd
 8000842:	d031      	beq.n	80008a8 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fee5 	bl	8000620 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fede 	bl	8000620 <SPI_TxByte>
    } while (--wc);
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	3b01      	subs	r3, #1
 8000868:	73bb      	strb	r3, [r7, #14]
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1eb      	bne.n	8000848 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000870:	f7ff fef0 	bl	8000654 <SPI_RxByte>
    SPI_RxByte();
 8000874:	f7ff feee 	bl	8000654 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000878:	e00b      	b.n	8000892 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800087a:	f7ff feeb 	bl	8000654 <SPI_RxByte>
 800087e:	4603      	mov	r3, r0
 8000880:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	f003 031f 	and.w	r3, r3, #31
 8000888:	2b05      	cmp	r3, #5
 800088a:	d006      	beq.n	800089a <SD_TxDataBlock+0x82>
        break;

      i++;
 800088c:	7b7b      	ldrb	r3, [r7, #13]
 800088e:	3301      	adds	r3, #1
 8000890:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	2b40      	cmp	r3, #64	; 0x40
 8000896:	d9f0      	bls.n	800087a <SD_TxDataBlock+0x62>
 8000898:	e000      	b.n	800089c <SD_TxDataBlock+0x84>
        break;
 800089a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800089c:	bf00      	nop
 800089e:	f7ff fed9 	bl	8000654 <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0fa      	beq.n	800089e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d101      	bne.n	80008b6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008cc:	f7ff feee 	bl	80006ac <SD_ReadyWait>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d001      	beq.n	80008da <SD_SendCmd+0x1a>
    return 0xFF;
 80008d6:	23ff      	movs	r3, #255	; 0xff
 80008d8:	e040      	b.n	800095c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe9f 	bl	8000620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0e1b      	lsrs	r3, r3, #24
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe99 	bl	8000620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe93 	bl	8000620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe8d 	bl	8000620 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe88 	bl	8000620 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b40      	cmp	r3, #64	; 0x40
 8000918:	d101      	bne.n	800091e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800091a:	2395      	movs	r3, #149	; 0x95
 800091c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b48      	cmp	r3, #72	; 0x48
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000924:	2387      	movs	r3, #135	; 0x87
 8000926:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe78 	bl	8000620 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b4c      	cmp	r3, #76	; 0x4c
 8000934:	d101      	bne.n	800093a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000936:	f7ff fe8d 	bl	8000654 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800093a:	230a      	movs	r3, #10
 800093c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800093e:	f7ff fe89 	bl	8000654 <SPI_RxByte>
 8000942:	4603      	mov	r3, r0
 8000944:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000946:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800094a:	2b00      	cmp	r3, #0
 800094c:	da05      	bge.n	800095a <SD_SendCmd+0x9a>
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	3b01      	subs	r3, #1
 8000952:	73bb      	strb	r3, [r7, #14]
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f1      	bne.n	800093e <SD_SendCmd+0x7e>

  return res;
 800095a:	7b7b      	ldrb	r3, [r7, #13]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000974:	2301      	movs	r3, #1
 8000976:	e0d5      	b.n	8000b24 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000978:	4b6c      	ldr	r3, [pc, #432]	; (8000b2c <SD_disk_initialize+0x1c8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <SD_disk_initialize+0x2a>
    return Stat;
 8000986:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <SD_disk_initialize+0x1c8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	e0ca      	b.n	8000b24 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800098e:	f7ff fea9 	bl	80006e4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000992:	f7ff fe2d 	bl	80005f0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800099a:	2100      	movs	r1, #0
 800099c:	2040      	movs	r0, #64	; 0x40
 800099e:	f7ff ff8f 	bl	80008c0 <SD_SendCmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f040 80a5 	bne.w	8000af4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80009aa:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <SD_disk_initialize+0x1cc>)
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80009b4:	2048      	movs	r0, #72	; 0x48
 80009b6:	f7ff ff83 	bl	80008c0 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d158      	bne.n	8000a72 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e00c      	b.n	80009e0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80009c6:	7bfc      	ldrb	r4, [r7, #15]
 80009c8:	f7ff fe44 	bl	8000654 <SPI_RxByte>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4423      	add	r3, r4
 80009d6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	3301      	adds	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d9ef      	bls.n	80009c6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009e6:	7abb      	ldrb	r3, [r7, #10]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	f040 8083 	bne.w	8000af4 <SD_disk_initialize+0x190>
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	2baa      	cmp	r3, #170	; 0xaa
 80009f2:	d17f      	bne.n	8000af4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009f4:	2100      	movs	r1, #0
 80009f6:	2077      	movs	r0, #119	; 0x77
 80009f8:	f7ff ff62 	bl	80008c0 <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d807      	bhi.n	8000a12 <SD_disk_initialize+0xae>
 8000a02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff5a 	bl	80008c0 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000a12:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <SD_disk_initialize+0x1cc>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1eb      	bne.n	80009f4 <SD_disk_initialize+0x90>
 8000a1c:	e000      	b.n	8000a20 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000a1e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a20:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <SD_disk_initialize+0x1cc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d064      	beq.n	8000af4 <SD_disk_initialize+0x190>
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	207a      	movs	r0, #122	; 0x7a
 8000a2e:	f7ff ff47 	bl	80008c0 <SD_SendCmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d15d      	bne.n	8000af4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e00c      	b.n	8000a58 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a3e:	7bfc      	ldrb	r4, [r7, #15]
 8000a40:	f7ff fe08 	bl	8000654 <SPI_RxByte>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4423      	add	r3, r4
 8000a4e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	3301      	adds	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d9ef      	bls.n	8000a3e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a5e:	7a3b      	ldrb	r3, [r7, #8]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SD_disk_initialize+0x108>
 8000a68:	2306      	movs	r3, #6
 8000a6a:	e000      	b.n	8000a6e <SD_disk_initialize+0x10a>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	73bb      	strb	r3, [r7, #14]
 8000a70:	e040      	b.n	8000af4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a72:	2100      	movs	r1, #0
 8000a74:	2077      	movs	r0, #119	; 0x77
 8000a76:	f7ff ff23 	bl	80008c0 <SD_SendCmd>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d808      	bhi.n	8000a92 <SD_disk_initialize+0x12e>
 8000a80:	2100      	movs	r1, #0
 8000a82:	2069      	movs	r0, #105	; 0x69
 8000a84:	f7ff ff1c 	bl	80008c0 <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d801      	bhi.n	8000a92 <SD_disk_initialize+0x12e>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e000      	b.n	8000a94 <SD_disk_initialize+0x130>
 8000a92:	2301      	movs	r3, #1
 8000a94:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d10e      	bne.n	8000aba <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2077      	movs	r0, #119	; 0x77
 8000aa0:	f7ff ff0e 	bl	80008c0 <SD_SendCmd>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d80e      	bhi.n	8000ac8 <SD_disk_initialize+0x164>
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2069      	movs	r0, #105	; 0x69
 8000aae:	f7ff ff07 	bl	80008c0 <SD_SendCmd>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000ab8:	e00d      	b.n	8000ad6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000aba:	2100      	movs	r1, #0
 8000abc:	2041      	movs	r0, #65	; 0x41
 8000abe:	f7ff feff 	bl	80008c0 <SD_SendCmd>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d005      	beq.n	8000ad4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <SD_disk_initialize+0x1cc>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1e1      	bne.n	8000a96 <SD_disk_initialize+0x132>
 8000ad2:	e000      	b.n	8000ad6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ad4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <SD_disk_initialize+0x1cc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d007      	beq.n	8000af0 <SD_disk_initialize+0x18c>
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	2050      	movs	r0, #80	; 0x50
 8000ae6:	f7ff feeb 	bl	80008c0 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <SD_disk_initialize+0x1d0>)
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000afa:	f7ff fd85 	bl	8000608 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000afe:	f7ff fda9 	bl	8000654 <SPI_RxByte>

  if (type)
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <SD_disk_initialize+0x1c8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SD_disk_initialize+0x1c8>)
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e001      	b.n	8000b1e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000b1a:	f7ff fe2f 	bl	800077c <SD_PowerOff>
  }

  return Stat;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <SD_disk_initialize+0x1c8>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	200022e5 	.word	0x200022e5
 8000b34:	200000a4 	.word	0x200000a4

08000b38 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_status+0x14>
    return STA_NOINIT;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e002      	b.n	8000b52 <SD_disk_status+0x1a>

  return Stat;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SD_disk_status+0x28>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000

08000b64 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <SD_disk_read+0x1c>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b80:	2304      	movs	r3, #4
 8000b82:	e051      	b.n	8000c28 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <SD_disk_read+0xcc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e048      	b.n	8000c28 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <SD_disk_read+0xd0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	607b      	str	r3, [r7, #4]

  SELECT();
 8000ba8:	f7ff fd22 	bl	80005f0 <SELECT>

  if (count == 1)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d111      	bne.n	8000bd6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2051      	movs	r0, #81	; 0x51
 8000bb6:	f7ff fe83 	bl	80008c0 <SD_SendCmd>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d129      	bne.n	8000c14 <SD_disk_read+0xb0>
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	68b8      	ldr	r0, [r7, #8]
 8000bc6:	f7ff fdf1 	bl	80007ac <SD_RxDataBlock>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d021      	beq.n	8000c14 <SD_disk_read+0xb0>
      count = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	e01e      	b.n	8000c14 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2052      	movs	r0, #82	; 0x52
 8000bda:	f7ff fe71 	bl	80008c0 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d117      	bne.n	8000c14 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fddf 	bl	80007ac <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00a      	beq.n	8000c0a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bfa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ed      	bne.n	8000be4 <SD_disk_read+0x80>
 8000c08:	e000      	b.n	8000c0c <SD_disk_read+0xa8>
          break;
 8000c0a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	204c      	movs	r0, #76	; 0x4c
 8000c10:	f7ff fe56 	bl	80008c0 <SD_SendCmd>
    }
  }

  DESELECT();
 8000c14:	f7ff fcf8 	bl	8000608 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000c18:	f7ff fd1c 	bl	8000654 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <SD_disk_write+0x1c>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c54:	2304      	movs	r3, #4
 8000c56:	e06b      	b.n	8000d30 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000c58:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <SD_disk_write+0x100>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e062      	b.n	8000d30 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <SD_disk_write+0x100>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e059      	b.n	8000d30 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <SD_disk_write+0x104>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c8e:	f7ff fcaf 	bl	80005f0 <SELECT>

  if (count == 1)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d110      	bne.n	8000cba <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	2058      	movs	r0, #88	; 0x58
 8000c9c:	f7ff fe10 	bl	80008c0 <SD_SendCmd>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d13a      	bne.n	8000d1c <SD_disk_write+0xe4>
 8000ca6:	21fe      	movs	r1, #254	; 0xfe
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f7ff fdb5 	bl	8000818 <SD_TxDataBlock>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d033      	beq.n	8000d1c <SD_disk_write+0xe4>
      count = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	e030      	b.n	8000d1c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <SD_disk_write+0x104>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2077      	movs	r0, #119	; 0x77
 8000cca:	f7ff fdf9 	bl	80008c0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	2057      	movs	r0, #87	; 0x57
 8000cd2:	f7ff fdf5 	bl	80008c0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	2059      	movs	r0, #89	; 0x59
 8000cda:	f7ff fdf1 	bl	80008c0 <SD_SendCmd>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d11b      	bne.n	8000d1c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000ce4:	21fc      	movs	r1, #252	; 0xfc
 8000ce6:	68b8      	ldr	r0, [r7, #8]
 8000ce8:	f7ff fd96 	bl	8000818 <SD_TxDataBlock>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00a      	beq.n	8000d08 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cf8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1ee      	bne.n	8000ce4 <SD_disk_write+0xac>
 8000d06:	e000      	b.n	8000d0a <SD_disk_write+0xd2>
          break;
 8000d08:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000d0a:	21fd      	movs	r1, #253	; 0xfd
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fd83 	bl	8000818 <SD_TxDataBlock>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <SD_disk_write+0xe4>
      {
        count = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000d1c:	f7ff fc74 	bl	8000608 <DESELECT>
  SPI_RxByte();
 8000d20:	f7ff fc98 	bl	8000654 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	200000a4 	.word	0x200000a4

08000d40 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	603a      	str	r2, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e117      	b.n	8000f8e <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d126      	bne.n	8000db8 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00e      	beq.n	8000d90 <SD_disk_ioctl+0x50>
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d012      	beq.n	8000d9c <SD_disk_ioctl+0x5c>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d11a      	bne.n	8000db0 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000d7a:	f7ff fd0b 	bl	8000794 <SD_CheckPower>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000d84:	f7ff fcfa 	bl	800077c <SD_PowerOff>
      res = RES_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d8e:	e0fc      	b.n	8000f8a <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d90:	f7ff fca8 	bl	80006e4 <SD_PowerOn>
      res = RES_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d9a:	e0f6      	b.n	8000f8a <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	1c5c      	adds	r4, r3, #1
 8000da0:	f7ff fcf8 	bl	8000794 <SD_CheckPower>
 8000da4:	4603      	mov	r3, r0
 8000da6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dae:	e0ec      	b.n	8000f8a <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000db0:	2304      	movs	r3, #4
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000db6:	e0e8      	b.n	8000f8a <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000db8:	4b77      	ldr	r3, [pc, #476]	; (8000f98 <SD_disk_ioctl+0x258>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e0e1      	b.n	8000f8e <SD_disk_ioctl+0x24e>

    SELECT();
 8000dca:	f7ff fc11 	bl	80005f0 <SELECT>

    switch (ctrl)
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b0d      	cmp	r3, #13
 8000dd2:	f200 80cb 	bhi.w	8000f6c <SD_disk_ioctl+0x22c>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <SD_disk_ioctl+0x9c>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000ed7 	.word	0x08000ed7
 8000de0:	08000e15 	.word	0x08000e15
 8000de4:	08000ec7 	.word	0x08000ec7
 8000de8:	08000f6d 	.word	0x08000f6d
 8000dec:	08000f6d 	.word	0x08000f6d
 8000df0:	08000f6d 	.word	0x08000f6d
 8000df4:	08000f6d 	.word	0x08000f6d
 8000df8:	08000f6d 	.word	0x08000f6d
 8000dfc:	08000f6d 	.word	0x08000f6d
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08000f6d 	.word	0x08000f6d
 8000e08:	08000ee9 	.word	0x08000ee9
 8000e0c:	08000f0d 	.word	0x08000f0d
 8000e10:	08000f31 	.word	0x08000f31
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e14:	2100      	movs	r1, #0
 8000e16:	2049      	movs	r0, #73	; 0x49
 8000e18:	f7ff fd52 	bl	80008c0 <SD_SendCmd>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 80a8 	bne.w	8000f74 <SD_disk_ioctl+0x234>
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcbe 	bl	80007ac <SD_RxDataBlock>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 809e 	beq.w	8000f74 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	099b      	lsrs	r3, r3, #6
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10e      	bne.n	8000e60 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e42:	7d7b      	ldrb	r3, [r7, #21]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	7d3b      	ldrb	r3, [r7, #20]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e56:	8bfb      	ldrh	r3, [r7, #30]
 8000e58:	029a      	lsls	r2, r3, #10
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e02e      	b.n	8000ebe <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e60:	7c7b      	ldrb	r3, [r7, #17]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	7dbb      	ldrb	r3, [r7, #22]
 8000e6a:	09db      	lsrs	r3, r3, #7
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	7d7b      	ldrb	r3, [r7, #21]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f003 0306 	and.w	r3, r3, #6
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3302      	adds	r3, #2
 8000e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e88:	7d3b      	ldrb	r3, [r7, #20]
 8000e8a:	099b      	lsrs	r3, r3, #6
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7cfb      	ldrb	r3, [r7, #19]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	7cbb      	ldrb	r3, [r7, #18]
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000eb0:	8bfa      	ldrh	r2, [r7, #30]
 8000eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb6:	3b09      	subs	r3, #9
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000ec4:	e056      	b.n	8000f74 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ed4:	e055      	b.n	8000f82 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000ed6:	f7ff fbe9 	bl	80006ac <SD_ReadyWait>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2bff      	cmp	r3, #255	; 0xff
 8000ede:	d14b      	bne.n	8000f78 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ee6:	e047      	b.n	8000f78 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2049      	movs	r0, #73	; 0x49
 8000eec:	f7ff fce8 	bl	80008c0 <SD_SendCmd>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d142      	bne.n	8000f7c <SD_disk_ioctl+0x23c>
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	6a38      	ldr	r0, [r7, #32]
 8000efa:	f7ff fc57 	bl	80007ac <SD_RxDataBlock>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03b      	beq.n	8000f7c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f0a:	e037      	b.n	8000f7c <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	204a      	movs	r0, #74	; 0x4a
 8000f10:	f7ff fcd6 	bl	80008c0 <SD_SendCmd>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d132      	bne.n	8000f80 <SD_disk_ioctl+0x240>
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	6a38      	ldr	r0, [r7, #32]
 8000f1e:	f7ff fc45 	bl	80007ac <SD_RxDataBlock>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d02b      	beq.n	8000f80 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f2e:	e027      	b.n	8000f80 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000f30:	2100      	movs	r1, #0
 8000f32:	207a      	movs	r0, #122	; 0x7a
 8000f34:	f7ff fcc4 	bl	80008c0 <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d116      	bne.n	8000f6c <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f44:	e00b      	b.n	8000f5e <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000f46:	6a3c      	ldr	r4, [r7, #32]
 8000f48:	1c63      	adds	r3, r4, #1
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	f7ff fb82 	bl	8000654 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d9ef      	bls.n	8000f46 <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f72:	e006      	b.n	8000f82 <SD_disk_ioctl+0x242>
      break;
 8000f74:	bf00      	nop
 8000f76:	e004      	b.n	8000f82 <SD_disk_ioctl+0x242>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <SD_disk_ioctl+0x242>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <SD_disk_ioctl+0x242>
      break;
 8000f80:	bf00      	nop
    }

    DESELECT();
 8000f82:	f7ff fb41 	bl	8000608 <DESELECT>
    SPI_RxByte();
 8000f86:	f7ff fb65 	bl	8000654 <SPI_RxByte>
  }

  return res;
 8000f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	372c      	adds	r7, #44	; 0x2c
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_GPIO_Init+0x74>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <MX_GPIO_Init+0x74>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_GPIO_Init+0x74>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800101c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SCB_EnableICache+0x3c>)
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800102c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <SCB_EnableICache+0x3c>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <SCB_EnableICache+0x3c>)
 8001036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800103c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001040:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SCB_EnableDCache+0x7c>)
 800105c:	2200      	movs	r2, #0
 800105e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <SCB_EnableDCache+0x7c>)
 8001068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	0b5b      	lsrs	r3, r3, #13
 8001072:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001076:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001080:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800108a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <SCB_EnableDCache+0x7c>)
 8001092:	4313      	orrs	r3, r2
 8001094:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1ef      	bne.n	8001082 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	60fa      	str	r2, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e5      	bne.n	8001078 <SCB_EnableDCache+0x24>
 80010ac:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <SCB_EnableDCache+0x7c>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <SCB_EnableDCache+0x7c>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6153      	str	r3, [r2, #20]
 80010bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010c0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	int i=0;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80010e0:	e002      	b.n	80010e8 <bufsize+0x14>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f6      	bne.n	80010e2 <bufsize+0xe>
	return i;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <clear_buffer>:

void clear_buffer (void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e007      	b.n	8001120 <clear_buffer+0x1c>
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <clear_buffer+0x30>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b7f      	cmp	r3, #127	; 0x7f
 8001124:	ddf4      	ble.n	8001110 <clear_buffer+0xc>
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200011c0 	.word	0x200011c0

08001138 <send_uart>:

void send_uart (char *string)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f87d 	bl	8000240 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	b29a      	uxth	r2, r3
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <send_uart+0x2c>)
 8001156:	f002 fe11 	bl	8003d7c <HAL_UART_Transmit>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000ec 	.word	0x200000ec

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800116e:	f7ff ff51 	bl	8001014 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001172:	f7ff ff6f 	bl	8001054 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fc5e 	bl	8001a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f9b1 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f7ff ff0d 	bl	8000f9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001182:	f000 fa45 	bl	8001610 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001186:	f000 fbb9 	bl	80018fc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800118a:	f003 fa95 	bl	80046b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f000 fcae 	bl	8001af0 <HAL_Delay>


  uint8_t len = strlen ("SD CARD mounted successfully...\n\n");
 8001194:	2321      	movs	r3, #33	; 0x21
 8001196:	71fb      	strb	r3, [r7, #7]
  fresult = f_mount(&fs, "/", 1);
 8001198:	2201      	movs	r2, #1
 800119a:	49af      	ldr	r1, [pc, #700]	; (8001458 <main+0x2f0>)
 800119c:	48af      	ldr	r0, [pc, #700]	; (800145c <main+0x2f4>)
 800119e:	f005 f96f 	bl	8006480 <f_mount>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4bae      	ldr	r3, [pc, #696]	; (8001460 <main+0x2f8>)
 80011a8:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 80011aa:	4bad      	ldr	r3, [pc, #692]	; (8001460 <main+0x2f8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <main+0x52>
	  send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 80011b2:	48ac      	ldr	r0, [pc, #688]	; (8001464 <main+0x2fc>)
 80011b4:	f7ff ffc0 	bl	8001138 <send_uart>
 80011b8:	e007      	b.n	80011ca <main+0x62>
  else
  {
		HAL_UART_Transmit(&huart3, (uint8_t *) "SD CARD mounted successfully...\n\n", len, HAL_MAX_DELAY);  // transmit in blocking mode
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	49a9      	ldr	r1, [pc, #676]	; (8001468 <main+0x300>)
 80011c4:	48a9      	ldr	r0, [pc, #676]	; (800146c <main+0x304>)
 80011c6:	f002 fdd9 	bl	8003d7c <HAL_UART_Transmit>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 80011ca:	4aa9      	ldr	r2, [pc, #676]	; (8001470 <main+0x308>)
 80011cc:	49a9      	ldr	r1, [pc, #676]	; (8001474 <main+0x30c>)
 80011ce:	48aa      	ldr	r0, [pc, #680]	; (8001478 <main+0x310>)
 80011d0:	f006 f927 	bl	8007422 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80011d4:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <main+0x308>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	3b02      	subs	r3, #2
 80011dc:	4aa4      	ldr	r2, [pc, #656]	; (8001470 <main+0x308>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	8952      	ldrh	r2, [r2, #10]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011ee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80011f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011fa:	ee17 2a90 	vmov	r2, s15
 80011fe:	4b9f      	ldr	r3, [pc, #636]	; (800147c <main+0x314>)
 8001200:	601a      	str	r2, [r3, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001202:	4b9e      	ldr	r3, [pc, #632]	; (800147c <main+0x314>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	499d      	ldr	r1, [pc, #628]	; (8001480 <main+0x318>)
 800120a:	489e      	ldr	r0, [pc, #632]	; (8001484 <main+0x31c>)
 800120c:	f006 fbdc 	bl	80079c8 <siprintf>
  	send_uart(buffer);
 8001210:	489c      	ldr	r0, [pc, #624]	; (8001484 <main+0x31c>)
 8001212:	f7ff ff91 	bl	8001138 <send_uart>
  	clear_buffer();
 8001216:	f7ff ff75 	bl	8001104 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <main+0x308>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	895b      	ldrh	r3, [r3, #10]
 8001220:	461a      	mov	r2, r3
 8001222:	4b94      	ldr	r3, [pc, #592]	; (8001474 <main+0x30c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	fb03 f302 	mul.w	r3, r3, r2
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001232:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800123e:	ee17 2a90 	vmov	r2, s15
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <main+0x320>)
 8001244:	601a      	str	r2, [r3, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001246:	4b90      	ldr	r3, [pc, #576]	; (8001488 <main+0x320>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	498f      	ldr	r1, [pc, #572]	; (800148c <main+0x324>)
 800124e:	488d      	ldr	r0, [pc, #564]	; (8001484 <main+0x31c>)
 8001250:	f006 fbba 	bl	80079c8 <siprintf>
  	send_uart(buffer);
 8001254:	488b      	ldr	r0, [pc, #556]	; (8001484 <main+0x31c>)
 8001256:	f7ff ff6f 	bl	8001138 <send_uart>
  	clear_buffer();
 800125a:	f7ff ff53 	bl	8001104 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800125e:	2213      	movs	r2, #19
 8001260:	498b      	ldr	r1, [pc, #556]	; (8001490 <main+0x328>)
 8001262:	488c      	ldr	r0, [pc, #560]	; (8001494 <main+0x32c>)
 8001264:	f005 f952 	bl	800650c <f_open>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <main+0x2f8>)
 800126e:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 8001270:	4988      	ldr	r1, [pc, #544]	; (8001494 <main+0x32c>)
 8001272:	4889      	ldr	r0, [pc, #548]	; (8001498 <main+0x330>)
 8001274:	f006 faea 	bl	800784c <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 8001278:	4886      	ldr	r0, [pc, #536]	; (8001494 <main+0x32c>)
 800127a:	f005 fe84 	bl	8006f86 <f_close>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <main+0x2f8>)
 8001284:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <main+0x2f8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <main+0x12c>
 800128e:	4883      	ldr	r0, [pc, #524]	; (800149c <main+0x334>)
 8001290:	f7ff ff52 	bl	8001138 <send_uart>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001294:	2201      	movs	r2, #1
 8001296:	497e      	ldr	r1, [pc, #504]	; (8001490 <main+0x328>)
 8001298:	487e      	ldr	r0, [pc, #504]	; (8001494 <main+0x32c>)
 800129a:	f005 f937 	bl	800650c <f_open>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <main+0x2f8>)
 80012a4:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <main+0x32c>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <main+0x32c>)
 80012ac:	4619      	mov	r1, r3
 80012ae:	4875      	ldr	r0, [pc, #468]	; (8001484 <main+0x31c>)
 80012b0:	f006 fa17 	bl	80076e2 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 80012b4:	487a      	ldr	r0, [pc, #488]	; (80014a0 <main+0x338>)
 80012b6:	f7ff ff3f 	bl	8001138 <send_uart>
  	send_uart(buffer);
 80012ba:	4872      	ldr	r0, [pc, #456]	; (8001484 <main+0x31c>)
 80012bc:	f7ff ff3c 	bl	8001138 <send_uart>
  	send_uart("\n\n");
 80012c0:	4878      	ldr	r0, [pc, #480]	; (80014a4 <main+0x33c>)
 80012c2:	f7ff ff39 	bl	8001138 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80012c6:	4873      	ldr	r0, [pc, #460]	; (8001494 <main+0x32c>)
 80012c8:	f005 fe5d 	bl	8006f86 <f_close>

  	clear_buffer();
 80012cc:	f7ff ff1a 	bl	8001104 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80012d0:	220a      	movs	r2, #10
 80012d2:	4975      	ldr	r1, [pc, #468]	; (80014a8 <main+0x340>)
 80012d4:	486f      	ldr	r0, [pc, #444]	; (8001494 <main+0x32c>)
 80012d6:	f005 f919 	bl	800650c <f_open>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <main+0x2f8>)
 80012e0:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 80012e2:	4a68      	ldr	r2, [pc, #416]	; (8001484 <main+0x31c>)
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <main+0x344>)
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	2357      	movs	r3, #87	; 0x57
 80012ec:	461a      	mov	r2, r3
 80012ee:	f006 fb57 	bl	80079a0 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80012f2:	4864      	ldr	r0, [pc, #400]	; (8001484 <main+0x31c>)
 80012f4:	f7ff feee 	bl	80010d4 <bufsize>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <main+0x348>)
 80012fe:	4961      	ldr	r1, [pc, #388]	; (8001484 <main+0x31c>)
 8001300:	4864      	ldr	r0, [pc, #400]	; (8001494 <main+0x32c>)
 8001302:	f005 fc2e 	bl	8006b62 <f_write>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <main+0x2f8>)
 800130c:	701a      	strb	r2, [r3, #0]

  	send_uart ("File2.txt created and data is written\n");
 800130e:	4869      	ldr	r0, [pc, #420]	; (80014b4 <main+0x34c>)
 8001310:	f7ff ff12 	bl	8001138 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001314:	485f      	ldr	r0, [pc, #380]	; (8001494 <main+0x32c>)
 8001316:	f005 fe36 	bl	8006f86 <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 800131a:	f7ff fef3 	bl	8001104 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800131e:	2201      	movs	r2, #1
 8001320:	4961      	ldr	r1, [pc, #388]	; (80014a8 <main+0x340>)
 8001322:	485c      	ldr	r0, [pc, #368]	; (8001494 <main+0x32c>)
 8001324:	f005 f8f2 	bl	800650c <f_open>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <main+0x2f8>)
 800132e:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001330:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <main+0x2f8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <main+0x1d6>
 8001338:	485f      	ldr	r0, [pc, #380]	; (80014b8 <main+0x350>)
 800133a:	f7ff fefd 	bl	8001138 <send_uart>

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 800133e:	4b55      	ldr	r3, [pc, #340]	; (8001494 <main+0x32c>)
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <main+0x354>)
 8001344:	494f      	ldr	r1, [pc, #316]	; (8001484 <main+0x31c>)
 8001346:	4853      	ldr	r0, [pc, #332]	; (8001494 <main+0x32c>)
 8001348:	f005 faac 	bl	80068a4 <f_read>
  	send_uart(buffer);
 800134c:	484d      	ldr	r0, [pc, #308]	; (8001484 <main+0x31c>)
 800134e:	f7ff fef3 	bl	8001138 <send_uart>
  	send_uart("\n\n");
 8001352:	4854      	ldr	r0, [pc, #336]	; (80014a4 <main+0x33c>)
 8001354:	f7ff fef0 	bl	8001138 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001358:	484e      	ldr	r0, [pc, #312]	; (8001494 <main+0x32c>)
 800135a:	f005 fe14 	bl	8006f86 <f_close>

  	clear_buffer();
 800135e:	f7ff fed1 	bl	8001104 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8001362:	2203      	movs	r2, #3
 8001364:	4950      	ldr	r1, [pc, #320]	; (80014a8 <main+0x340>)
 8001366:	484b      	ldr	r0, [pc, #300]	; (8001494 <main+0x32c>)
 8001368:	f005 f8d0 	bl	800650c <f_open>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <main+0x2f8>)
 8001372:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 8001374:	4b47      	ldr	r3, [pc, #284]	; (8001494 <main+0x32c>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4619      	mov	r1, r3
 800137a:	4846      	ldr	r0, [pc, #280]	; (8001494 <main+0x32c>)
 800137c:	f005 fe2d 	bl	8006fda <f_lseek>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <main+0x2f8>)
 8001386:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <main+0x2f8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <main+0x22e>
 8001390:	484b      	ldr	r0, [pc, #300]	; (80014c0 <main+0x358>)
 8001392:	f7ff fed1 	bl	8001138 <send_uart>

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8001396:	493f      	ldr	r1, [pc, #252]	; (8001494 <main+0x32c>)
 8001398:	484a      	ldr	r0, [pc, #296]	; (80014c4 <main+0x35c>)
 800139a:	f006 fa57 	bl	800784c <f_puts>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <main+0x2f8>)
 80013a4:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 80013a6:	483b      	ldr	r0, [pc, #236]	; (8001494 <main+0x32c>)
 80013a8:	f005 fded 	bl	8006f86 <f_close>

  	clear_buffer();
 80013ac:	f7ff feaa 	bl	8001104 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 80013b0:	2201      	movs	r2, #1
 80013b2:	493d      	ldr	r1, [pc, #244]	; (80014a8 <main+0x340>)
 80013b4:	4837      	ldr	r0, [pc, #220]	; (8001494 <main+0x32c>)
 80013b6:	f005 f8a9 	bl	800650c <f_open>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <main+0x2f8>)
 80013c0:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <main+0x32c>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <main+0x354>)
 80013c8:	492e      	ldr	r1, [pc, #184]	; (8001484 <main+0x31c>)
 80013ca:	4832      	ldr	r0, [pc, #200]	; (8001494 <main+0x32c>)
 80013cc:	f005 fa6a 	bl	80068a4 <f_read>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <main+0x2f8>)
 80013d6:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <main+0x2f8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <main+0x27e>
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <main+0x360>)
 80013e2:	f7ff fea9 	bl	8001138 <send_uart>
  	send_uart(buffer);
 80013e6:	4827      	ldr	r0, [pc, #156]	; (8001484 <main+0x31c>)
 80013e8:	f7ff fea6 	bl	8001138 <send_uart>
  	send_uart("\n\n");
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <main+0x33c>)
 80013ee:	f7ff fea3 	bl	8001138 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80013f2:	4828      	ldr	r0, [pc, #160]	; (8001494 <main+0x32c>)
 80013f4:	f005 fdc7 	bl	8006f86 <f_close>

  	clear_buffer();
 80013f8:	f7ff fe84 	bl	8001104 <clear_buffer>


  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	fresult = f_unlink("/file1.txt");
 80013fc:	4833      	ldr	r0, [pc, #204]	; (80014cc <main+0x364>)
 80013fe:	f006 f8c5 	bl	800758c <f_unlink>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <main+0x2f8>)
 8001408:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <main+0x2f8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <main+0x2b0>
 8001412:	482f      	ldr	r0, [pc, #188]	; (80014d0 <main+0x368>)
 8001414:	f7ff fe90 	bl	8001138 <send_uart>

  	fresult = f_unlink("/file2.txt");
 8001418:	482e      	ldr	r0, [pc, #184]	; (80014d4 <main+0x36c>)
 800141a:	f006 f8b7 	bl	800758c <f_unlink>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <main+0x2f8>)
 8001424:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <main+0x2f8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <main+0x2cc>
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <main+0x370>)
 8001430:	f7ff fe82 	bl	8001138 <send_uart>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "/", 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <main+0x2f0>)
 8001438:	2000      	movs	r0, #0
 800143a:	f005 f821 	bl	8006480 <f_mount>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <main+0x2f8>)
 8001444:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <main+0x2f8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <main+0x2ec>
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <main+0x374>)
 8001450:	f7ff fe72 	bl	8001138 <send_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001454:	e7fe      	b.n	8001454 <main+0x2ec>
 8001456:	bf00      	nop
 8001458:	080081d8 	.word	0x080081d8
 800145c:	20000184 	.word	0x20000184
 8001460:	20001248 	.word	0x20001248
 8001464:	080081dc 	.word	0x080081dc
 8001468:	08008200 	.word	0x08008200
 800146c:	200000ec 	.word	0x200000ec
 8001470:	20001244 	.word	0x20001244
 8001474:	200000e8 	.word	0x200000e8
 8001478:	08008224 	.word	0x08008224
 800147c:	200012b0 	.word	0x200012b0
 8001480:	08008228 	.word	0x08008228
 8001484:	200011c0 	.word	0x200011c0
 8001488:	200011bc 	.word	0x200011bc
 800148c:	08008244 	.word	0x08008244
 8001490:	08008260 	.word	0x08008260
 8001494:	200012b4 	.word	0x200012b4
 8001498:	0800826c 	.word	0x0800826c
 800149c:	080082b4 	.word	0x080082b4
 80014a0:	080082e0 	.word	0x080082e0
 80014a4:	08008320 	.word	0x08008320
 80014a8:	08008324 	.word	0x08008324
 80014ac:	08008330 	.word	0x08008330
 80014b0:	20001240 	.word	0x20001240
 80014b4:	08008388 	.word	0x08008388
 80014b8:	080083b0 	.word	0x080083b0
 80014bc:	200011b8 	.word	0x200011b8
 80014c0:	080083e0 	.word	0x080083e0
 80014c4:	08008400 	.word	0x08008400
 80014c8:	08008434 	.word	0x08008434
 80014cc:	08008460 	.word	0x08008460
 80014d0:	0800846c 	.word	0x0800846c
 80014d4:	08008490 	.word	0x08008490
 80014d8:	0800849c 	.word	0x0800849c
 80014dc:	080084c0 	.word	0x080084c0

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0b8      	sub	sp, #224	; 0xe0
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fa61 	bl	80079b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	2290      	movs	r2, #144	; 0x90
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f006 fa52 	bl	80079b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <SystemClock_Config+0x118>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <SystemClock_Config+0x118>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <SystemClock_Config+0x118>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <SystemClock_Config+0x11c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a33      	ldr	r2, [pc, #204]	; (80015fc <SystemClock_Config+0x11c>)
 8001530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <SystemClock_Config+0x11c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800155e:	2319      	movs	r3, #25
 8001560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001564:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fdd3 	bl	8002128 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001588:	f000 f83a 	bl	8001600 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800158c:	f000 fd7c 	bl	8002088 <HAL_PWREx_EnableOverDrive>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001596:	f000 f833 	bl	8001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015c0:	2107      	movs	r1, #7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f85e 	bl	8002684 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015ce:	f000 f817 	bl	8001600 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fa21 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80015ec:	f000 f808 	bl	8001600 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	37e0      	adds	r7, #224	; 0xe0
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_SPI1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <MX_SPI1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_SPI1_Init+0x74>)
 800161c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_SPI1_Init+0x74>)
 800162a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800162e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_SPI1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_SPI1_Init+0x74>)
 800163e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001642:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_SPI1_Init+0x74>)
 8001646:	2218      	movs	r2, #24
 8001648:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_SPI1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_SPI1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_SPI1_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_SPI1_Init+0x74>)
 800165e:	2207      	movs	r2, #7
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_SPI1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_SPI1_Init+0x74>)
 800166a:	2208      	movs	r2, #8
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_SPI1_Init+0x74>)
 8001670:	f001 fe00 	bl	8003274 <HAL_SPI_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800167a:	f7ff ffc1 	bl	8001600 <Error_Handler>
  }

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000124c 	.word	0x2000124c
 8001688:	40013000 	.word	0x40013000

0800168c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a25      	ldr	r2, [pc, #148]	; (8001740 <HAL_SPI_MspInit+0xb4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d143      	bne.n	8001736 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_SPI_MspInit+0xb8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f6:	2310      	movs	r3, #16
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <HAL_SPI_MspInit+0xbc>)
 8001712:	f000 faf5 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001716:	2338      	movs	r3, #56	; 0x38
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001726:	2305      	movs	r3, #5
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_SPI_MspInit+0xc0>)
 8001732:	f000 fae5 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40013000 	.word	0x40013000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_MspInit+0x44>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x44>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x44>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <SDTimer_Handler>:
/* USER CODE BEGIN PFP */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <SDTimer_Handler+0x40>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <SDTimer_Handler+0x1c>
    Timer1--;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <SDTimer_Handler+0x40>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <SDTimer_Handler+0x40>)
 80017b2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <SDTimer_Handler+0x44>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <SDTimer_Handler+0x34>
    Timer2--;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <SDTimer_Handler+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SDTimer_Handler+0x44>)
 80017ca:	701a      	strb	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200022e5 	.word	0x200022e5
 80017dc:	200022e4 	.word	0x200022e4

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <SysTick_Handler+0x30>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SysTick_Handler+0x30>)
 8001840:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <SysTick_Handler+0x30>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b09      	cmp	r3, #9
 800184a:	d904      	bls.n	8001856 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Handler+0x30>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001852:	f7ff ffa1 	bl	8001798 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 f92b 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000a6 	.word	0x200000a6

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f006 f85a 	bl	800794c <__errno>
 8001898:	4602      	mov	r2, r0
 800189a:	230c      	movs	r3, #12
 800189c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20080000 	.word	0x20080000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	200000a8 	.word	0x200000a8
 80018cc:	20004360 	.word	0x20004360

080018d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SystemInit+0x28>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <SystemInit+0x28>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0x28>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <MX_USART3_UART_Init+0x5c>)
 8001904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_USART3_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_USART3_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_USART3_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_USART3_UART_Init+0x58>)
 8001940:	f002 f9ce 	bl	8003ce0 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800194a:	f7ff fe59 	bl	8001600 <Error_Handler>
  }

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200000ec 	.word	0x200000ec
 8001958:	40004800 	.word	0x40004800

0800195c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0x7c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d128      	bne.n	80019d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x80>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x80>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x80>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c0:	2307      	movs	r3, #7
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x84>)
 80019cc:	f000 f998 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40004800 	.word	0x40004800
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ea:	e003      	b.n	80019f4 <LoopCopyDataInit>

080019ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019f2:	3104      	adds	r1, #4

080019f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019fc:	d3f6      	bcc.n	80019ec <CopyDataInit>
  ldr  r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a00:	e002      	b.n	8001a08 <LoopFillZerobss>

08001a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a04:	f842 3b04 	str.w	r3, [r2], #4

08001a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a0c:	d3f9      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ff5f 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f005 ffa1 	bl	8007958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fba7 	bl	8001168 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001a20:	08008604 	.word	0x08008604
  ldr  r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a28:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001a2c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001a30:	2000435c 	.word	0x2000435c

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>

08001a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f000 f92c 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f805 	bl	8001a50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a46:	f7ff fe83 	bl	8001750 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f939 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f90f 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	200022e8 	.word	0x200022e8

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200022e8 	.word	0x200022e8

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_Delay+0x40>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <__NVIC_SetPriorityGrouping>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	05fa0000 	.word	0x05fa0000

08001b7c <__NVIC_GetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff47 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff5c 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffb0 	bl	8001c54 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e175      	b.n	800200c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8164 	bne.w	8002006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d00b      	beq.n	8001d5e <HAL_GPIO_Init+0x5e>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x100>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80be 	beq.w	8002006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_GPIO_Init+0x320>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a64      	ldr	r2, [pc, #400]	; (8002020 <HAL_GPIO_Init+0x320>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b62      	ldr	r3, [pc, #392]	; (8002020 <HAL_GPIO_Init+0x320>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ea2:	4a60      	ldr	r2, [pc, #384]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_GPIO_Init+0x328>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d037      	beq.n	8001f3e <HAL_GPIO_Init+0x23e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d031      	beq.n	8001f3a <HAL_GPIO_Init+0x23a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a55      	ldr	r2, [pc, #340]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02b      	beq.n	8001f36 <HAL_GPIO_Init+0x236>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d025      	beq.n	8001f32 <HAL_GPIO_Init+0x232>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a53      	ldr	r2, [pc, #332]	; (8002038 <HAL_GPIO_Init+0x338>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01f      	beq.n	8001f2e <HAL_GPIO_Init+0x22e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_GPIO_Init+0x33c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d019      	beq.n	8001f2a <HAL_GPIO_Init+0x22a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x340>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a50      	ldr	r2, [pc, #320]	; (8002044 <HAL_GPIO_Init+0x344>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x348>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x34c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001f16:	2309      	movs	r3, #9
 8001f18:	e012      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	e010      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f1e:	2308      	movs	r3, #8
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x240>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f50:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_GPIO_Init+0x324>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f82:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_GPIO_Init+0x350>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae86 	bls.w	8001d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40022000 	.word	0x40022000
 800204c:	40022400 	.word	0x40022400
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b6:	f7ff fd0f 	bl	8001ad8 <HAL_GetTick>
 80020ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020be:	f7ff fd0b 	bl	8001ad8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	d901      	bls.n	80020d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e022      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d1ee      	bne.n	80020be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff fcf4 	bl	8001ad8 <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f2:	e009      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f4:	f7ff fcf0 	bl	8001ad8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002102:	d901      	bls.n	8002108 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e007      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002114:	d1ee      	bne.n	80020f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e29b      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b96      	ldr	r3, [pc, #600]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002158:	4b93      	ldr	r3, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x62>
 8002164:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b8d      	ldr	r3, [pc, #564]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x130>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e275      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x7a>
 8002194:	4b84      	ldr	r3, [pc, #528]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a83      	ldr	r2, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x9c>
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7b      	ldr	r2, [pc, #492]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xc0>
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a75      	ldr	r2, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a72      	ldr	r2, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021e8:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6e      	ldr	r2, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fc66 	bl	8001ad8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fc62 	bl	8001ad8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e229      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe8>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff fc52 	bl	8001ad8 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fc4e 	bl	8001ad8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e215      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x110>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d069      	beq.n	800233a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x190>
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1e9      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	493d      	ldr	r1, [pc, #244]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e040      	b.n	800233a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fc04 	bl	8001ad8 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc00 	bl	8001ad8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1c7      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4929      	ldr	r1, [pc, #164]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff fbe0 	bl	8001ad8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff fbdc 	bl	8001ad8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1a3      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d038      	beq.n	80023b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7ff fbbd 	bl	8001ad8 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002362:	f7ff fbb9 	bl	8001ad8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e180      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x23a>
 8002380:	e01a      	b.n	80023b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff fba3 	bl	8001ad8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7ff fb9f 	bl	8001ad8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d903      	bls.n	80023ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e166      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
 80023a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a4 	beq.w	800250e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a88      	ldr	r2, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b83      	ldr	r3, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023fa:	4b80      	ldr	r3, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7f      	ldr	r2, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb67 	bl	8001ad8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7ff fb63 	bl	8001ad8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	; 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e12a      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x31a>
 8002434:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a6f      	ldr	r2, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x33c>
 800244a:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x35e>
 800246c:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5b      	ldr	r2, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb17 	bl	8001ad8 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff fb13 	bl	8001ad8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0d8      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x386>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7ff fb01 	bl	8001ad8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fafd 	bl	8001ad8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0c2      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80ae 	beq.w	8002674 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d06d      	beq.n	8002600 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d14b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff face 	bl	8001ad8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff faca 	bl	8001ad8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e091      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff fa9c 	bl	8001ad8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7ff fa98 	bl	8001ad8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e05f      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x47c>
 80025c2:	e057      	b.n	8002674 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fa82 	bl	8001ad8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fa7e 	bl	8001ad8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4b0>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x54c>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x558>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d030      	beq.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d129      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d119      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 020f 	bic.w	r2, r3, #15
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7ff f9ae 	bl	8001ad8 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff f9aa 	bl	8001ad8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4601      	mov	r1, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	fa21 f303 	lsr.w	r3, r1, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f90a 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	08008528 	.word	0x08008528
 8002854:	20000004 	.word	0x20000004
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d007      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x32>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d008      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x38>
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 808d 	bne.w	80029a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800288a:	60bb      	str	r3, [r7, #8]
      break;
 800288c:	e08c      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002890:	60bb      	str	r3, [r7, #8]
      break;
 8002892:	e089      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d023      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	ea03 0501 	and.w	r5, r3, r1
 80028c0:	ea04 0602 	and.w	r6, r4, r2
 80028c4:	4a3d      	ldr	r2, [pc, #244]	; (80029bc <HAL_RCC_GetSysClockFreq+0x160>)
 80028c6:	fb02 f106 	mul.w	r1, r2, r6
 80028ca:	2200      	movs	r2, #0
 80028cc:	fb02 f205 	mul.w	r2, r2, r5
 80028d0:	440a      	add	r2, r1
 80028d2:	493a      	ldr	r1, [pc, #232]	; (80029bc <HAL_RCC_GetSysClockFreq+0x160>)
 80028d4:	fba5 0101 	umull	r0, r1, r5, r1
 80028d8:	1853      	adds	r3, r2, r1
 80028da:	4619      	mov	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4623      	mov	r3, r4
 80028e6:	f7fd fd03 	bl	80002f0 <__aeabi_uldivmod>
 80028ea:	4603      	mov	r3, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e049      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	ea03 0501 	and.w	r5, r3, r1
 8002908:	ea04 0602 	and.w	r6, r4, r2
 800290c:	4629      	mov	r1, r5
 800290e:	4632      	mov	r2, r6
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0154      	lsls	r4, r2, #5
 800291a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800291e:	014b      	lsls	r3, r1, #5
 8002920:	4619      	mov	r1, r3
 8002922:	4622      	mov	r2, r4
 8002924:	1b49      	subs	r1, r1, r5
 8002926:	eb62 0206 	sbc.w	r2, r2, r6
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	0194      	lsls	r4, r2, #6
 8002934:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002938:	018b      	lsls	r3, r1, #6
 800293a:	1a5b      	subs	r3, r3, r1
 800293c:	eb64 0402 	sbc.w	r4, r4, r2
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	00e2      	lsls	r2, r4, #3
 800294a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800294e:	00d9      	lsls	r1, r3, #3
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	195b      	adds	r3, r3, r5
 8002956:	eb44 0406 	adc.w	r4, r4, r6
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	02a2      	lsls	r2, r4, #10
 8002964:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002968:	0299      	lsls	r1, r3, #10
 800296a:	460b      	mov	r3, r1
 800296c:	4614      	mov	r4, r2
 800296e:	4618      	mov	r0, r3
 8002970:	4621      	mov	r1, r4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	461a      	mov	r2, r3
 800297a:	4623      	mov	r3, r4
 800297c:	f7fd fcb8 	bl	80002f0 <__aeabi_uldivmod>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	3301      	adds	r3, #1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	60bb      	str	r3, [r7, #8]
      break;
 80029a0:	e002      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80029a4:	60bb      	str	r3, [r7, #8]
      break;
 80029a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a8:	68bb      	ldr	r3, [r7, #8]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	017d7840 	.word	0x017d7840

080029c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4601      	mov	r1, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08008538 	.word	0x08008538

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a04:	f7ff ffdc 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0b5b      	lsrs	r3, r3, #13
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08008538 	.word	0x08008538

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a50:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a68      	ldr	r2, [pc, #416]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a5a:	6093      	str	r3, [r2, #8]
 8002a5c:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	4964      	ldr	r1, [pc, #400]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d017      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a82:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	4959      	ldr	r1, [pc, #356]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d017      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	494a      	ldr	r1, [pc, #296]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 808b 	beq.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe ffd2 	bl	8001ad8 <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe ffce 	bl	8001ad8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e38d      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d035      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d02e      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d114      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff96 	bl	8001ad8 <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe ff92 	bl	8001ad8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e34f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bde:	d111      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bee:	400b      	ands	r3, r1
 8002bf0:	4901      	ldr	r1, [pc, #4]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	0ffffcff 	.word	0x0ffffcff
 8002c04:	4bb3      	ldr	r3, [pc, #716]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4ab2      	ldr	r2, [pc, #712]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c0e:	6093      	str	r3, [r2, #8]
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	49ad      	ldr	r1, [pc, #692]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c2e:	4ba9      	ldr	r3, [pc, #676]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	4aa7      	ldr	r2, [pc, #668]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c3e:	4ba5      	ldr	r3, [pc, #660]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	49a2      	ldr	r1, [pc, #648]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5c:	4b9d      	ldr	r3, [pc, #628]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6a:	499a      	ldr	r1, [pc, #616]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c7e:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8c:	4991      	ldr	r1, [pc, #580]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ca0:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	4989      	ldr	r1, [pc, #548]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cc2:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4980      	ldr	r1, [pc, #512]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce4:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4978      	ldr	r1, [pc, #480]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f023 020c 	bic.w	r2, r3, #12
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	496f      	ldr	r1, [pc, #444]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d28:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	4967      	ldr	r1, [pc, #412]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d58:	495e      	ldr	r1, [pc, #376]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	4956      	ldr	r1, [pc, #344]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	494d      	ldr	r1, [pc, #308]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	4945      	ldr	r1, [pc, #276]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	493c      	ldr	r1, [pc, #240]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	4934      	ldr	r1, [pc, #208]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d011      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e88:	4912      	ldr	r1, [pc, #72]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00f      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	4985      	ldr	r1, [pc, #532]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002eec:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efc:	497c      	ldr	r1, [pc, #496]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f12:	f040 80d6 	bne.w	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f16:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f22:	f7fe fdd9 	bl	8001ad8 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe fdd5 	bl	8001ad8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b64      	cmp	r3, #100	; 0x64
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e194      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3c:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d021      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11d      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f5c:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f70:	0e1b      	lsrs	r3, r3, #24
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	019a      	lsls	r2, r3, #6
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	071b      	lsls	r3, r3, #28
 8002f90:	4957      	ldr	r1, [pc, #348]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02e      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc2:	d129      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc4:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd8:	0f1b      	lsrs	r3, r3, #28
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	019a      	lsls	r2, r3, #6
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	071b      	lsls	r3, r3, #28
 8002ff8:	493d      	ldr	r1, [pc, #244]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003006:	f023 021f 	bic.w	r2, r3, #31
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	3b01      	subs	r3, #1
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01d      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	0e1b      	lsrs	r3, r3, #24
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003038:	0f1b      	lsrs	r3, r3, #28
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	019a      	lsls	r2, r3, #6
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	071b      	lsls	r3, r3, #28
 8003058:	4925      	ldr	r1, [pc, #148]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d011      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	019a      	lsls	r2, r3, #6
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	4919      	ldr	r1, [pc, #100]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800309a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309c:	f7fe fd1c 	bl	8001ad8 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030a4:	f7fe fd18 	bl	8001ad8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0d7      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 80cd 	bne.w	8003264 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d6:	f7fe fcff 	bl	8001ad8 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030de:	f7fe fcfb 	bl	8001ad8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d903      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0ba      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80030f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030f4:	4b5e      	ldr	r3, [pc, #376]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003100:	d0ed      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02e      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d12a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800312a:	4b51      	ldr	r3, [pc, #324]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003138:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	0f1b      	lsrs	r3, r3, #28
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	019a      	lsls	r2, r3, #6
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	071b      	lsls	r3, r3, #28
 800315e:	4944      	ldr	r1, [pc, #272]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003166:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	493d      	ldr	r1, [pc, #244]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d022      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003194:	d11d      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	0e1b      	lsrs	r3, r3, #24
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a4:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	0f1b      	lsrs	r3, r3, #28
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	019a      	lsls	r2, r3, #6
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	431a      	orrs	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	4929      	ldr	r1, [pc, #164]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d028      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	0e1b      	lsrs	r3, r3, #24
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	019a      	lsls	r2, r3, #6
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	4917      	ldr	r1, [pc, #92]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800321c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4911      	ldr	r1, [pc, #68]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323c:	f7fe fc4c 	bl	8001ad8 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003244:	f7fe fc48 	bl	8001ad8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e007      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003262:	d1ef      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e084      	b.n	8003390 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe f9f3 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c6:	d902      	bls.n	80032ce <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032dc:	d007      	beq.n	80032ee <HAL_SPI_Init+0x7a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032e6:	d002      	beq.n	80032ee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032fe:	d903      	bls.n	8003308 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
 8003306:	e002      	b.n	800330e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	ea42 0103 	orr.w	r1, r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0204 	and.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	ea42 0103 	orr.w	r1, r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_SPI_Transmit+0x22>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e150      	b.n	800365c <HAL_SPI_Transmit+0x2c4>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c2:	f7fe fb89 	bl	8001ad8 <HAL_GetTick>
 80033c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033dc:	e135      	b.n	800364a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_SPI_Transmit+0x52>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ee:	e12c      	b.n	800364a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d107      	bne.n	800344c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d007      	beq.n	800346a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003472:	d94b      	bls.n	800350c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_Transmit+0xea>
 800347c:	8afb      	ldrh	r3, [r7, #22]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d13e      	bne.n	8003500 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034a6:	e02b      	b.n	8003500 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d112      	bne.n	80034dc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034da:	e011      	b.n	8003500 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034dc:	f7fe fafc 	bl	8001ad8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d803      	bhi.n	80034f4 <HAL_SPI_Transmit+0x15c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Transmit+0x162>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034fe:	e0a4      	b.n	800364a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ce      	bne.n	80034a8 <HAL_SPI_Transmit+0x110>
 800350a:	e07c      	b.n	8003606 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_SPI_Transmit+0x182>
 8003514:	8afb      	ldrh	r3, [r7, #22]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d170      	bne.n	80035fc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d912      	bls.n	800354a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b02      	subs	r3, #2
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003548:	e058      	b.n	80035fc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003570:	e044      	b.n	80035fc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d12b      	bne.n	80035d8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d912      	bls.n	80035b0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ae:	e025      	b.n	80035fc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035d6:	e011      	b.n	80035fc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d8:	f7fe fa7e 	bl	8001ad8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d803      	bhi.n	80035f0 <HAL_SPI_Transmit+0x258>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Transmit+0x25e>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035fa:	e026      	b.n	800364a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1b5      	bne.n	8003572 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fb22 	bl	8003c54 <SPI_EndRxTxTransaction>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e000      	b.n	800364a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800365a:	7ffb      	ldrb	r3, [r7, #31]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_SPI_TransmitReceive+0x26>
 8003686:	2302      	movs	r3, #2
 8003688:	e1fb      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x41e>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003692:	f7fe fa21 	bl	8001ad8 <HAL_GetTick>
 8003696:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800369e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ae:	7efb      	ldrb	r3, [r7, #27]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d00e      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x6e>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ba:	d106      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x66>
 80036c4:	7efb      	ldrb	r3, [r7, #27]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d003      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036d0:	e1cd      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x80>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x80>
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d103      	bne.n	80036ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036ea:	e1c0      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d003      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2205      	movs	r2, #5
 80036fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	887a      	ldrh	r2, [r7, #2]
 8003726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003742:	d802      	bhi.n	800374a <HAL_SPI_TransmitReceive+0xe6>
 8003744:	8a3b      	ldrh	r3, [r7, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d908      	bls.n	800375c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e007      	b.n	800376c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d007      	beq.n	800378a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003792:	d97c      	bls.n	800388e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x13e>
 800379c:	8a7b      	ldrh	r3, [r7, #18]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d169      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	881a      	ldrh	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c6:	e056      	b.n	8003876 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d11b      	bne.n	800380e <HAL_SPI_TransmitReceive+0x1aa>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d016      	beq.n	800380e <HAL_SPI_TransmitReceive+0x1aa>
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d113      	bne.n	800380e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	881a      	ldrh	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d11c      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x1f2>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	b292      	uxth	r2, r2
 8003834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003856:	f7fe f93f 	bl	8001ad8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003862:	429a      	cmp	r2, r3
 8003864:	d807      	bhi.n	8003876 <HAL_SPI_TransmitReceive+0x212>
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d003      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003874:	e0fb      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1a3      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x164>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d19d      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x164>
 800388c:	e0df      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_SPI_TransmitReceive+0x23a>
 8003896:	8a7b      	ldrh	r3, [r7, #18]
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 80cb 	bne.w	8003a34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d912      	bls.n	80038ce <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b02      	subs	r3, #2
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038cc:	e0b2      	b.n	8003a34 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f4:	e09e      	b.n	8003a34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d134      	bne.n	800396e <HAL_SPI_TransmitReceive+0x30a>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02f      	beq.n	800396e <HAL_SPI_TransmitReceive+0x30a>
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d12c      	bne.n	800396e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d912      	bls.n	8003944 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b02      	subs	r3, #2
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003942:	e012      	b.n	800396a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d148      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x3aa>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d042      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d923      	bls.n	80039dc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	b292      	uxth	r2, r2
 80039a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b02      	subs	r3, #2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d81f      	bhi.n	8003a0a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e016      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f103 020c 	add.w	r2, r3, #12
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a0e:	f7fe f863 	bl	8001ad8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_TransmitReceive+0x3c2>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x3c8>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a32:	e01c      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f af5b 	bne.w	80038f6 <HAL_SPI_TransmitReceive+0x292>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f af54 	bne.w	80038f6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f8fe 	bl	8003c54 <SPI_EndRxTxTransaction>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60
 8003a6a:	e000      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab6:	e04c      	b.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d048      	beq.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ac0:	f7fe f80a 	bl	8001ad8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d902      	bls.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aee:	d111      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	d004      	beq.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	d107      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d10f      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e00f      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1a3      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b88:	e057      	b.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b90:	d106      	bne.n	8003ba0 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d048      	beq.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ba8:	f7fd ff96 	bl	8001ad8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <SPI_WaitFifoStateUntilTimeout+0x44>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d111      	bne.n	8003bfc <SPI_WaitFifoStateUntilTimeout+0x82>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d004      	beq.n	8003bec <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d107      	bne.n	8003bfc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d10f      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e008      	b.n	8003c4c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d19f      	bne.n	8003b8a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff ff84 	bl	8003b7a <SPI_WaitFifoStateUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e027      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff07 	bl	8003aa6 <SPI_WaitFlagStateUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e014      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff5d 	bl	8003b7a <SPI_WaitFifoStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e000      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e040      	b.n	8003d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd fe2a 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8be 	bl	8003ea0 <UART_SetConfig>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e022      	b.n	8003d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb5c 	bl	80043f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fbe3 	bl	8004538 <UART_CheckIdleState>
 8003d72:	4603      	mov	r3, r0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d17f      	bne.n	8003e94 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Transmit+0x24>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e078      	b.n	8003e96 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x36>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e071      	b.n	8003e96 <HAL_UART_Transmit+0x11a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fe87 	bl	8001ad8 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d108      	bne.n	8003df8 <HAL_UART_Transmit+0x7c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003e08:	e02c      	b.n	8003e64 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fbd4 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e038      	b.n	8003e96 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e007      	b.n	8003e52 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1cc      	bne.n	8003e0a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fba1 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e005      	b.n	8003e96 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4bb1      	ldr	r3, [pc, #708]	; (8004194 <UART_SetConfig+0x2f4>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6939      	ldr	r1, [r7, #16]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a9f      	ldr	r2, [pc, #636]	; (8004198 <UART_SetConfig+0x2f8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d121      	bne.n	8003f64 <UART_SetConfig+0xc4>
 8003f20:	4b9e      	ldr	r3, [pc, #632]	; (800419c <UART_SetConfig+0x2fc>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d816      	bhi.n	8003f5c <UART_SetConfig+0xbc>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x94>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f51 	.word	0x08003f51
 8003f3c:	08003f4b 	.word	0x08003f4b
 8003f40:	08003f57 	.word	0x08003f57
 8003f44:	2301      	movs	r3, #1
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e151      	b.n	80041ee <UART_SetConfig+0x34e>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e14e      	b.n	80041ee <UART_SetConfig+0x34e>
 8003f50:	2304      	movs	r3, #4
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e14b      	b.n	80041ee <UART_SetConfig+0x34e>
 8003f56:	2308      	movs	r3, #8
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e148      	b.n	80041ee <UART_SetConfig+0x34e>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	bf00      	nop
 8003f62:	e144      	b.n	80041ee <UART_SetConfig+0x34e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a8d      	ldr	r2, [pc, #564]	; (80041a0 <UART_SetConfig+0x300>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d134      	bne.n	8003fd8 <UART_SetConfig+0x138>
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	; (800419c <UART_SetConfig+0x2fc>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d829      	bhi.n	8003fd0 <UART_SetConfig+0x130>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <UART_SetConfig+0xe4>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fd1 	.word	0x08003fd1
 8003f8c:	08003fd1 	.word	0x08003fd1
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fc5 	.word	0x08003fc5
 8003f98:	08003fd1 	.word	0x08003fd1
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	08003fbf 	.word	0x08003fbf
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd1 	.word	0x08003fd1
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e117      	b.n	80041ee <UART_SetConfig+0x34e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e114      	b.n	80041ee <UART_SetConfig+0x34e>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e111      	b.n	80041ee <UART_SetConfig+0x34e>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e10e      	b.n	80041ee <UART_SetConfig+0x34e>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	bf00      	nop
 8003fd6:	e10a      	b.n	80041ee <UART_SetConfig+0x34e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a71      	ldr	r2, [pc, #452]	; (80041a4 <UART_SetConfig+0x304>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d120      	bne.n	8004024 <UART_SetConfig+0x184>
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <UART_SetConfig+0x2fc>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d00f      	beq.n	8004010 <UART_SetConfig+0x170>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d802      	bhi.n	8003ffa <UART_SetConfig+0x15a>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <UART_SetConfig+0x164>
 8003ff8:	e010      	b.n	800401c <UART_SetConfig+0x17c>
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d005      	beq.n	800400a <UART_SetConfig+0x16a>
 8003ffe:	2b30      	cmp	r3, #48	; 0x30
 8004000:	d009      	beq.n	8004016 <UART_SetConfig+0x176>
 8004002:	e00b      	b.n	800401c <UART_SetConfig+0x17c>
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e0f1      	b.n	80041ee <UART_SetConfig+0x34e>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e0ee      	b.n	80041ee <UART_SetConfig+0x34e>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e0eb      	b.n	80041ee <UART_SetConfig+0x34e>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e0e8      	b.n	80041ee <UART_SetConfig+0x34e>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	bf00      	nop
 8004022:	e0e4      	b.n	80041ee <UART_SetConfig+0x34e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <UART_SetConfig+0x308>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d120      	bne.n	8004070 <UART_SetConfig+0x1d0>
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <UART_SetConfig+0x2fc>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d00f      	beq.n	800405c <UART_SetConfig+0x1bc>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d802      	bhi.n	8004046 <UART_SetConfig+0x1a6>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <UART_SetConfig+0x1b0>
 8004044:	e010      	b.n	8004068 <UART_SetConfig+0x1c8>
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d005      	beq.n	8004056 <UART_SetConfig+0x1b6>
 800404a:	2bc0      	cmp	r3, #192	; 0xc0
 800404c:	d009      	beq.n	8004062 <UART_SetConfig+0x1c2>
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x1c8>
 8004050:	2300      	movs	r3, #0
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e0cb      	b.n	80041ee <UART_SetConfig+0x34e>
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e0c8      	b.n	80041ee <UART_SetConfig+0x34e>
 800405c:	2304      	movs	r3, #4
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e0c5      	b.n	80041ee <UART_SetConfig+0x34e>
 8004062:	2308      	movs	r3, #8
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0c2      	b.n	80041ee <UART_SetConfig+0x34e>
 8004068:	2310      	movs	r3, #16
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	bf00      	nop
 800406e:	e0be      	b.n	80041ee <UART_SetConfig+0x34e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <UART_SetConfig+0x30c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d124      	bne.n	80040c4 <UART_SetConfig+0x224>
 800407a:	4b48      	ldr	r3, [pc, #288]	; (800419c <UART_SetConfig+0x2fc>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004088:	d012      	beq.n	80040b0 <UART_SetConfig+0x210>
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d802      	bhi.n	8004096 <UART_SetConfig+0x1f6>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <UART_SetConfig+0x204>
 8004094:	e012      	b.n	80040bc <UART_SetConfig+0x21c>
 8004096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409a:	d006      	beq.n	80040aa <UART_SetConfig+0x20a>
 800409c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a0:	d009      	beq.n	80040b6 <UART_SetConfig+0x216>
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x21c>
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e0a1      	b.n	80041ee <UART_SetConfig+0x34e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e09e      	b.n	80041ee <UART_SetConfig+0x34e>
 80040b0:	2304      	movs	r3, #4
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e09b      	b.n	80041ee <UART_SetConfig+0x34e>
 80040b6:	2308      	movs	r3, #8
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e098      	b.n	80041ee <UART_SetConfig+0x34e>
 80040bc:	2310      	movs	r3, #16
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	bf00      	nop
 80040c2:	e094      	b.n	80041ee <UART_SetConfig+0x34e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <UART_SetConfig+0x310>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d124      	bne.n	8004118 <UART_SetConfig+0x278>
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <UART_SetConfig+0x2fc>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d012      	beq.n	8004104 <UART_SetConfig+0x264>
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d802      	bhi.n	80040ea <UART_SetConfig+0x24a>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <UART_SetConfig+0x258>
 80040e8:	e012      	b.n	8004110 <UART_SetConfig+0x270>
 80040ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ee:	d006      	beq.n	80040fe <UART_SetConfig+0x25e>
 80040f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f4:	d009      	beq.n	800410a <UART_SetConfig+0x26a>
 80040f6:	e00b      	b.n	8004110 <UART_SetConfig+0x270>
 80040f8:	2301      	movs	r3, #1
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e077      	b.n	80041ee <UART_SetConfig+0x34e>
 80040fe:	2302      	movs	r3, #2
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e074      	b.n	80041ee <UART_SetConfig+0x34e>
 8004104:	2304      	movs	r3, #4
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e071      	b.n	80041ee <UART_SetConfig+0x34e>
 800410a:	2308      	movs	r3, #8
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e06e      	b.n	80041ee <UART_SetConfig+0x34e>
 8004110:	2310      	movs	r3, #16
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	bf00      	nop
 8004116:	e06a      	b.n	80041ee <UART_SetConfig+0x34e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <UART_SetConfig+0x314>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d124      	bne.n	800416c <UART_SetConfig+0x2cc>
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <UART_SetConfig+0x2fc>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d012      	beq.n	8004158 <UART_SetConfig+0x2b8>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d802      	bhi.n	800413e <UART_SetConfig+0x29e>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <UART_SetConfig+0x2ac>
 800413c:	e012      	b.n	8004164 <UART_SetConfig+0x2c4>
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004142:	d006      	beq.n	8004152 <UART_SetConfig+0x2b2>
 8004144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004148:	d009      	beq.n	800415e <UART_SetConfig+0x2be>
 800414a:	e00b      	b.n	8004164 <UART_SetConfig+0x2c4>
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e04d      	b.n	80041ee <UART_SetConfig+0x34e>
 8004152:	2302      	movs	r3, #2
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e04a      	b.n	80041ee <UART_SetConfig+0x34e>
 8004158:	2304      	movs	r3, #4
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e047      	b.n	80041ee <UART_SetConfig+0x34e>
 800415e:	2308      	movs	r3, #8
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e044      	b.n	80041ee <UART_SetConfig+0x34e>
 8004164:	2310      	movs	r3, #16
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	bf00      	nop
 800416a:	e040      	b.n	80041ee <UART_SetConfig+0x34e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <UART_SetConfig+0x318>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d139      	bne.n	80041ea <UART_SetConfig+0x34a>
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <UART_SetConfig+0x2fc>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004184:	d027      	beq.n	80041d6 <UART_SetConfig+0x336>
 8004186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418a:	d817      	bhi.n	80041bc <UART_SetConfig+0x31c>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01c      	beq.n	80041ca <UART_SetConfig+0x32a>
 8004190:	e027      	b.n	80041e2 <UART_SetConfig+0x342>
 8004192:	bf00      	nop
 8004194:	efff69f3 	.word	0xefff69f3
 8004198:	40011000 	.word	0x40011000
 800419c:	40023800 	.word	0x40023800
 80041a0:	40004400 	.word	0x40004400
 80041a4:	40004800 	.word	0x40004800
 80041a8:	40004c00 	.word	0x40004c00
 80041ac:	40005000 	.word	0x40005000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40007800 	.word	0x40007800
 80041b8:	40007c00 	.word	0x40007c00
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d006      	beq.n	80041d0 <UART_SetConfig+0x330>
 80041c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041c6:	d009      	beq.n	80041dc <UART_SetConfig+0x33c>
 80041c8:	e00b      	b.n	80041e2 <UART_SetConfig+0x342>
 80041ca:	2300      	movs	r3, #0
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e00e      	b.n	80041ee <UART_SetConfig+0x34e>
 80041d0:	2302      	movs	r3, #2
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e00b      	b.n	80041ee <UART_SetConfig+0x34e>
 80041d6:	2304      	movs	r3, #4
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e008      	b.n	80041ee <UART_SetConfig+0x34e>
 80041dc:	2308      	movs	r3, #8
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e005      	b.n	80041ee <UART_SetConfig+0x34e>
 80041e2:	2310      	movs	r3, #16
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	bf00      	nop
 80041e8:	e001      	b.n	80041ee <UART_SetConfig+0x34e>
 80041ea:	2310      	movs	r3, #16
 80041ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f6:	d17f      	bne.n	80042f8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d85c      	bhi.n	80042b8 <UART_SetConfig+0x418>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0x364>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004249 	.word	0x08004249
 800420c:	08004269 	.word	0x08004269
 8004210:	080042b9 	.word	0x080042b9
 8004214:	08004281 	.word	0x08004281
 8004218:	080042b9 	.word	0x080042b9
 800421c:	080042b9 	.word	0x080042b9
 8004220:	080042b9 	.word	0x080042b9
 8004224:	080042a1 	.word	0x080042a1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe fbd6 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800422c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	005a      	lsls	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	b29b      	uxth	r3, r3
 8004244:	61bb      	str	r3, [r7, #24]
        break;
 8004246:	e03a      	b.n	80042be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7fe fbda 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 800424c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	005a      	lsls	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	61bb      	str	r3, [r7, #24]
        break;
 8004266:	e02a      	b.n	80042be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	085a      	lsrs	r2, r3, #1
 800426e:	4b5f      	ldr	r3, [pc, #380]	; (80043ec <UART_SetConfig+0x54c>)
 8004270:	4413      	add	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6852      	ldr	r2, [r2, #4]
 8004276:	fbb3 f3f2 	udiv	r3, r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	61bb      	str	r3, [r7, #24]
        break;
 800427e:	e01e      	b.n	80042be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004280:	f7fe faec 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8004284:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	61bb      	str	r3, [r7, #24]
        break;
 800429e:	e00e      	b.n	80042be <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	61bb      	str	r3, [r7, #24]
        break;
 80042b6:	e002      	b.n	80042be <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
        break;
 80042bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0f      	cmp	r3, #15
 80042c2:	d916      	bls.n	80042f2 <UART_SetConfig+0x452>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d212      	bcs.n	80042f2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f023 030f 	bic.w	r3, r3, #15
 80042d4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	897a      	ldrh	r2, [r7, #10]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e070      	b.n	80043d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
 80042f6:	e06d      	b.n	80043d4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d859      	bhi.n	80043b2 <UART_SetConfig+0x512>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x464>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004329 	.word	0x08004329
 8004308:	08004347 	.word	0x08004347
 800430c:	08004365 	.word	0x08004365
 8004310:	080043b3 	.word	0x080043b3
 8004314:	0800437d 	.word	0x0800437d
 8004318:	080043b3 	.word	0x080043b3
 800431c:	080043b3 	.word	0x080043b3
 8004320:	080043b3 	.word	0x080043b3
 8004324:	0800439b 	.word	0x0800439b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fb56 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800432c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	085a      	lsrs	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e038      	b.n	80043b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004346:	f7fe fb5b 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 800434a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	085a      	lsrs	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	441a      	add	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	61bb      	str	r3, [r7, #24]
        break;
 8004362:	e029      	b.n	80043b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085a      	lsrs	r2, r3, #1
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <UART_SetConfig+0x550>)
 800436c:	4413      	add	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6852      	ldr	r2, [r2, #4]
 8004372:	fbb3 f3f2 	udiv	r3, r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	61bb      	str	r3, [r7, #24]
        break;
 800437a:	e01d      	b.n	80043b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437c:	f7fe fa6e 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8004380:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085a      	lsrs	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	441a      	add	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	b29b      	uxth	r3, r3
 8004396:	61bb      	str	r3, [r7, #24]
        break;
 8004398:	e00e      	b.n	80043b8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	61bb      	str	r3, [r7, #24]
        break;
 80043b0:	e002      	b.n	80043b8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
        break;
 80043b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d908      	bls.n	80043d0 <UART_SetConfig+0x530>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d204      	bcs.n	80043d0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	e001      	b.n	80043d4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	01e84800 	.word	0x01e84800
 80043f0:	00f42400 	.word	0x00f42400

080043f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01a      	beq.n	800450a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f2:	d10a      	bne.n	800450a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004546:	f7fd fac7 	bl	8001ad8 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b08      	cmp	r3, #8
 8004558:	d10e      	bne.n	8004578 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800455a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f82a 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e020      	b.n	80045ba <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d10e      	bne.n	80045a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f814 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e00a      	b.n	80045ba <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	e05d      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d059      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fd fa7c 	bl	8001ad8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11b      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004600:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e042      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02b      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d123      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004650:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004660:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e00f      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d092      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80046bc:	4904      	ldr	r1, [pc, #16]	; (80046d0 <MX_FATFS_Init+0x18>)
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <MX_FATFS_Init+0x1c>)
 80046c0:	f003 f934 	bl	800792c <FATFS_LinkDriver>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <MX_FATFS_Init+0x20>)
 80046ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80046cc:	bf00      	nop
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200022ec 	.word	0x200022ec
 80046d4:	20000010 	.word	0x20000010
 80046d8:	200022f0 	.word	0x200022f0

080046dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80046e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fc f933 	bl	8000964 <SD_disk_initialize>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <USER_initialize+0x28>)
 8004704:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004706:	4b03      	ldr	r3, [pc, #12]	; (8004714 <USER_initialize+0x28>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	2000000d 	.word	0x2000000d

08004718 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fc fa07 	bl	8000b38 <SD_disk_status>
 800472a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8004744:	7bf8      	ldrb	r0, [r7, #15]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	f7fc fa0a 	bl	8000b64 <SD_disk_read>
 8004750:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800476a:	7bf8      	ldrb	r0, [r7, #15]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	f7fc fa61 	bl	8000c38 <SD_disk_write>
 8004776:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	603a      	str	r2, [r7, #0]
 800478a:	71fb      	strb	r3, [r7, #7]
 800478c:	460b      	mov	r3, r1
 800478e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8004790:	79b9      	ldrb	r1, [r7, #6]
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc fad2 	bl	8000d40 <SD_disk_ioctl>
 800479c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <disk_status+0x30>)
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	79fa      	ldrb	r2, [r7, #7]
 80047c0:	4905      	ldr	r1, [pc, #20]	; (80047d8 <disk_status+0x30>)
 80047c2:	440a      	add	r2, r1
 80047c4:	7a12      	ldrb	r2, [r2, #8]
 80047c6:	4610      	mov	r0, r2
 80047c8:	4798      	blx	r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	200000d4 	.word	0x200000d4

080047dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <disk_initialize+0x48>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d111      	bne.n	8004818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <disk_initialize+0x48>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <disk_initialize+0x48>)
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	79fa      	ldrb	r2, [r7, #7]
 800480a:	4906      	ldr	r1, [pc, #24]	; (8004824 <disk_initialize+0x48>)
 800480c:	440a      	add	r2, r1
 800480e:	7a12      	ldrb	r2, [r2, #8]
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200000d4 	.word	0x200000d4

08004828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <disk_read+0x3c>)
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	689c      	ldr	r4, [r3, #8]
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	4a07      	ldr	r2, [pc, #28]	; (8004864 <disk_read+0x3c>)
 8004848:	4413      	add	r3, r2
 800484a:	7a18      	ldrb	r0, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	47a0      	blx	r4
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]
  return res;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd90      	pop	{r4, r7, pc}
 8004862:	bf00      	nop
 8004864:	200000d4 	.word	0x200000d4

08004868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <disk_write+0x3c>)
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68dc      	ldr	r4, [r3, #12]
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <disk_write+0x3c>)
 8004888:	4413      	add	r3, r2
 800488a:	7a18      	ldrb	r0, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	47a0      	blx	r4
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]
  return res;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd90      	pop	{r4, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	200000d4 	.word	0x200000d4

080048a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	603a      	str	r2, [r7, #0]
 80048b2:	71fb      	strb	r3, [r7, #7]
 80048b4:	460b      	mov	r3, r1
 80048b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <disk_ioctl+0x38>)
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	79fa      	ldrb	r2, [r7, #7]
 80048c6:	4906      	ldr	r1, [pc, #24]	; (80048e0 <disk_ioctl+0x38>)
 80048c8:	440a      	add	r2, r1
 80048ca:	7a10      	ldrb	r0, [r2, #8]
 80048cc:	79b9      	ldrb	r1, [r7, #6]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4798      	blx	r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200000d4 	.word	0x200000d4

080048e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3301      	adds	r3, #1
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b21b      	sxth	r3, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	b21b      	sxth	r3, r3
 8004904:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004906:	89fb      	ldrh	r3, [r7, #14]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3303      	adds	r3, #3
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	3202      	adds	r2, #2
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	3201      	adds	r2, #1
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
	return rv;
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	887a      	ldrh	r2, [r7, #2]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	1c53      	adds	r3, r2, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	6179      	str	r1, [r7, #20]
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f1      	bne.n	8004a02 <mem_cpy+0x1a>
	}
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	617a      	str	r2, [r7, #20]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f3      	bne.n	8004a3a <mem_set+0x10>
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a5e:	b480      	push	{r7}
 8004a60:	b089      	sub	sp, #36	; 0x24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	61fa      	str	r2, [r7, #28]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	61ba      	str	r2, [r7, #24]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	1acb      	subs	r3, r1, r3
 8004a8a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <mem_cmp+0x40>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0eb      	beq.n	8004a76 <mem_cmp+0x18>

	return r;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3724      	adds	r7, #36	; 0x24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ab6:	e002      	b.n	8004abe <chk_chr+0x12>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <chk_chr+0x26>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d1f2      	bne.n	8004ab8 <chk_chr+0xc>
	return *str;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e029      	b.n	8004b4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004af8:	4a27      	ldr	r2, [pc, #156]	; (8004b98 <chk_lock+0xb4>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	4413      	add	r3, r2
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01d      	beq.n	8004b42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b06:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <chk_lock+0xb4>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d116      	bne.n	8004b46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <chk_lock+0xb4>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d10c      	bne.n	8004b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b2c:	4a1a      	ldr	r2, [pc, #104]	; (8004b98 <chk_lock+0xb4>)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	4413      	add	r3, r2
 8004b34:	3308      	adds	r3, #8
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d102      	bne.n	8004b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b40:	e007      	b.n	8004b52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d9d2      	bls.n	8004af8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d109      	bne.n	8004b6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <chk_lock+0x80>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d101      	bne.n	8004b68 <chk_lock+0x84>
 8004b64:	2300      	movs	r3, #0
 8004b66:	e010      	b.n	8004b8a <chk_lock+0xa6>
 8004b68:	2312      	movs	r3, #18
 8004b6a:	e00e      	b.n	8004b8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <chk_lock+0xa0>
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <chk_lock+0xb4>)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	4413      	add	r3, r2
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d101      	bne.n	8004b88 <chk_lock+0xa4>
 8004b84:	2310      	movs	r3, #16
 8004b86:	e000      	b.n	8004b8a <chk_lock+0xa6>
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	200000b4 	.word	0x200000b4

08004b9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	e002      	b.n	8004bae <enq_lock+0x12>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d806      	bhi.n	8004bc2 <enq_lock+0x26>
 8004bb4:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <enq_lock+0x40>)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	4413      	add	r3, r2
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f2      	bne.n	8004ba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	200000b4 	.word	0x200000b4

08004be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e01f      	b.n	8004c30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004bf0:	4a41      	ldr	r2, [pc, #260]	; (8004cf8 <inc_lock+0x118>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4413      	add	r3, r2
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d113      	bne.n	8004c2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004c02:	4a3d      	ldr	r2, [pc, #244]	; (8004cf8 <inc_lock+0x118>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	4413      	add	r3, r2
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d109      	bne.n	8004c2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004c16:	4a38      	ldr	r2, [pc, #224]	; (8004cf8 <inc_lock+0x118>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3308      	adds	r3, #8
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d006      	beq.n	8004c38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d9dc      	bls.n	8004bf0 <inc_lock+0x10>
 8004c36:	e000      	b.n	8004c3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004c38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d132      	bne.n	8004ca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e002      	b.n	8004c4c <inc_lock+0x6c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d806      	bhi.n	8004c60 <inc_lock+0x80>
 8004c52:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <inc_lock+0x118>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f2      	bne.n	8004c46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d101      	bne.n	8004c6a <inc_lock+0x8a>
 8004c66:	2300      	movs	r3, #0
 8004c68:	e040      	b.n	8004cec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4922      	ldr	r1, [pc, #136]	; (8004cf8 <inc_lock+0x118>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	440b      	add	r3, r1
 8004c76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	491e      	ldr	r1, [pc, #120]	; (8004cf8 <inc_lock+0x118>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	440b      	add	r3, r1
 8004c84:	3304      	adds	r3, #4
 8004c86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <inc_lock+0x118>)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	440b      	add	r3, r1
 8004c94:	3308      	adds	r3, #8
 8004c96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <inc_lock+0x118>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	4413      	add	r3, r2
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <inc_lock+0xe0>
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <inc_lock+0x118>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	4413      	add	r3, r2
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <inc_lock+0xe0>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e015      	b.n	8004cec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <inc_lock+0xf8>
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <inc_lock+0x118>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	4413      	add	r3, r2
 8004cce:	330c      	adds	r3, #12
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	e001      	b.n	8004cdc <inc_lock+0xfc>
 8004cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cdc:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <inc_lock+0x118>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	440b      	add	r3, r1
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	200000b4 	.word	0x200000b4

08004cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d825      	bhi.n	8004d5c <dec_lock+0x60>
		n = Files[i].ctr;
 8004d10:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <dec_lock+0x74>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4413      	add	r3, r2
 8004d18:	330c      	adds	r3, #12
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d24:	d101      	bne.n	8004d2a <dec_lock+0x2e>
 8004d26:	2300      	movs	r3, #0
 8004d28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d2a:	89fb      	ldrh	r3, [r7, #14]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <dec_lock+0x3a>
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <dec_lock+0x74>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	330c      	adds	r3, #12
 8004d40:	89fa      	ldrh	r2, [r7, #14]
 8004d42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d44:	89fb      	ldrh	r3, [r7, #14]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <dec_lock+0x5a>
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <dec_lock+0x74>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4413      	add	r3, r2
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	737b      	strb	r3, [r7, #13]
 8004d5a:	e001      	b.n	8004d60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d60:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	200000b4 	.word	0x200000b4

08004d74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e010      	b.n	8004da4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d82:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <clear_lock+0x44>)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	4413      	add	r3, r2
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d105      	bne.n	8004d9e <clear_lock+0x2a>
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <clear_lock+0x44>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d9eb      	bls.n	8004d82 <clear_lock+0xe>
	}
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	200000b4 	.word	0x200000b4

08004dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	78db      	ldrb	r3, [r3, #3]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d034      	beq.n	8004e3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7858      	ldrb	r0, [r3, #1]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004de0:	2301      	movs	r3, #1
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	f7ff fd40 	bl	8004868 <disk_write>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e022      	b.n	8004e3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d217      	bcs.n	8004e3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	789b      	ldrb	r3, [r3, #2]
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e010      	b.n	8004e34 <sync_window+0x78>
					wsect += fs->fsize;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7858      	ldrb	r0, [r3, #1]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e26:	2301      	movs	r3, #1
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	f7ff fd1d 	bl	8004868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d8eb      	bhi.n	8004e12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d01b      	beq.n	8004e94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ffad 	bl	8004dbc <sync_window>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d113      	bne.n	8004e94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7858      	ldrb	r0, [r3, #1]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e76:	2301      	movs	r3, #1
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	f7ff fcd5 	bl	8004828 <disk_read>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff87 	bl	8004dbc <sync_window>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d159      	bne.n	8004f6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d149      	bne.n	8004f54 <sync_fs+0xb4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	791b      	ldrb	r3, [r3, #4]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d145      	bne.n	8004f54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	899b      	ldrh	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	f7ff fda8 	bl	8004a2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3334      	adds	r3, #52	; 0x34
 8004ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ee2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fd37 	bl	800495a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3334      	adds	r3, #52	; 0x34
 8004ef0:	4921      	ldr	r1, [pc, #132]	; (8004f78 <sync_fs+0xd8>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd4c 	bl	8004990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3334      	adds	r3, #52	; 0x34
 8004efc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004f00:	491e      	ldr	r1, [pc, #120]	; (8004f7c <sync_fs+0xdc>)
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fd44 	bl	8004990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3334      	adds	r3, #52	; 0x34
 8004f0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7ff fd3a 	bl	8004990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3334      	adds	r3, #52	; 0x34
 8004f20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7ff fd30 	bl	8004990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7858      	ldrb	r0, [r3, #1]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f7ff fc8d 	bl	8004868 <disk_write>
			fs->fsi_flag = 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff fca3 	bl	80048a8 <disk_ioctl>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <sync_fs+0xcc>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	41615252 	.word	0x41615252
 8004f7c:	61417272 	.word	0x61417272

08004f80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	3b02      	subs	r3, #2
 8004f8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	3b02      	subs	r3, #2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d301      	bcc.n	8004fa0 <clust2sect+0x20>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e008      	b.n	8004fb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	895b      	ldrh	r3, [r3, #10]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	fb03 f202 	mul.w	r2, r3, r2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4413      	add	r3, r2
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d904      	bls.n	8004fde <get_fat+0x20>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fde:	2301      	movs	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e0b7      	b.n	8005154 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d05a      	beq.n	80050a8 <get_fat+0xea>
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d07d      	beq.n	80050f2 <get_fat+0x134>
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	f040 80a2 	bne.w	8005140 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	899b      	ldrh	r3, [r3, #12]
 8005012:	4619      	mov	r1, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	fbb3 f3f1 	udiv	r3, r3, r1
 800501a:	4413      	add	r3, r2
 800501c:	4619      	mov	r1, r3
 800501e:	6938      	ldr	r0, [r7, #16]
 8005020:	f7ff ff10 	bl	8004e44 <move_window>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	f040 808d 	bne.w	8005146 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	60fa      	str	r2, [r7, #12]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	8992      	ldrh	r2, [r2, #12]
 8005036:	fbb3 f1f2 	udiv	r1, r3, r2
 800503a:	fb02 f201 	mul.w	r2, r2, r1
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005048:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	899b      	ldrh	r3, [r3, #12]
 8005052:	4619      	mov	r1, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	fbb3 f3f1 	udiv	r3, r3, r1
 800505a:	4413      	add	r3, r2
 800505c:	4619      	mov	r1, r3
 800505e:	6938      	ldr	r0, [r7, #16]
 8005060:	f7ff fef0 	bl	8004e44 <move_window>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d16f      	bne.n	800514a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	899b      	ldrh	r3, [r3, #12]
 800506e:	461a      	mov	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	fbb3 f1f2 	udiv	r1, r3, r2
 8005076:	fb02 f201 	mul.w	r2, r2, r1
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <get_fat+0xe0>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	e002      	b.n	80050a4 <get_fat+0xe6>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a4:	617b      	str	r3, [r7, #20]
			break;
 80050a6:	e055      	b.n	8005154 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	899b      	ldrh	r3, [r3, #12]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4619      	mov	r1, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80050bc:	4413      	add	r3, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	6938      	ldr	r0, [r7, #16]
 80050c2:	f7ff febf 	bl	8004e44 <move_window>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d140      	bne.n	800514e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	8992      	ldrh	r2, [r2, #12]
 80050da:	fbb3 f0f2 	udiv	r0, r3, r2
 80050de:	fb02 f200 	mul.w	r2, r2, r0
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	440b      	add	r3, r1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fbfc 	bl	80048e4 <ld_word>
 80050ec:	4603      	mov	r3, r0
 80050ee:	617b      	str	r3, [r7, #20]
			break;
 80050f0:	e030      	b.n	8005154 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	899b      	ldrh	r3, [r3, #12]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	fbb3 f3f1 	udiv	r3, r3, r1
 8005106:	4413      	add	r3, r2
 8005108:	4619      	mov	r1, r3
 800510a:	6938      	ldr	r0, [r7, #16]
 800510c:	f7ff fe9a 	bl	8004e44 <move_window>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11d      	bne.n	8005152 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	8992      	ldrh	r2, [r2, #12]
 8005124:	fbb3 f0f2 	udiv	r0, r3, r2
 8005128:	fb02 f200 	mul.w	r2, r2, r0
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	440b      	add	r3, r1
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fbef 	bl	8004914 <ld_dword>
 8005136:	4603      	mov	r3, r0
 8005138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800513c:	617b      	str	r3, [r7, #20]
			break;
 800513e:	e009      	b.n	8005154 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005140:	2301      	movs	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e006      	b.n	8005154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005146:	bf00      	nop
 8005148:	e004      	b.n	8005154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005152:	bf00      	nop
		}
	}

	return val;
 8005154:	697b      	ldr	r3, [r7, #20]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800515e:	b590      	push	{r4, r7, lr}
 8005160:	b089      	sub	sp, #36	; 0x24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	f240 8106 	bls.w	8005382 <put_fat+0x224>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	f080 8100 	bcs.w	8005382 <put_fat+0x224>
		switch (fs->fs_type) {
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b02      	cmp	r3, #2
 8005188:	f000 8088 	beq.w	800529c <put_fat+0x13e>
 800518c:	2b03      	cmp	r3, #3
 800518e:	f000 80b0 	beq.w	80052f2 <put_fat+0x194>
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 80f5 	bne.w	8005382 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4413      	add	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	899b      	ldrh	r3, [r3, #12]
 80051ae:	4619      	mov	r1, r3
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b6:	4413      	add	r3, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fe42 	bl	8004e44 <move_window>
 80051c0:	4603      	mov	r3, r0
 80051c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 80d4 	bne.w	8005374 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	61ba      	str	r2, [r7, #24]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	8992      	ldrh	r2, [r2, #12]
 80051dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80051e0:	fb02 f200 	mul.w	r2, r2, r0
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	440b      	add	r3, r1
 80051e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <put_fat+0xb2>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b25a      	sxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	b25b      	sxtb	r3, r3
 8005208:	4313      	orrs	r3, r2
 800520a:	b25b      	sxtb	r3, r3
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e001      	b.n	8005214 <put_fat+0xb6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	899b      	ldrh	r3, [r3, #12]
 8005226:	4619      	mov	r1, r3
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	fbb3 f3f1 	udiv	r3, r3, r1
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fe06 	bl	8004e44 <move_window>
 8005238:	4603      	mov	r3, r0
 800523a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 809a 	bne.w	8005378 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	899b      	ldrh	r3, [r3, #12]
 800524e:	461a      	mov	r2, r3
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	fbb3 f0f2 	udiv	r0, r3, r2
 8005256:	fb02 f200 	mul.w	r2, r2, r0
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	440b      	add	r3, r1
 800525e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <put_fat+0x114>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e00e      	b.n	8005290 <put_fat+0x132>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b25b      	sxtb	r3, r3
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	b25a      	sxtb	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	b25b      	sxtb	r3, r3
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	b25b      	sxtb	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b25b      	sxtb	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	70da      	strb	r2, [r3, #3]
			break;
 800529a:	e072      	b.n	8005382 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	899b      	ldrh	r3, [r3, #12]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4619      	mov	r1, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80052b0:	4413      	add	r3, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fdc5 	bl	8004e44 <move_window>
 80052ba:	4603      	mov	r3, r0
 80052bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d15b      	bne.n	800537c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	8992      	ldrh	r2, [r2, #12]
 80052d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80052d6:	fb02 f200 	mul.w	r2, r2, r0
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	440b      	add	r3, r1
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	b292      	uxth	r2, r2
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fb38 	bl	800495a <st_word>
			fs->wflag = 1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	70da      	strb	r2, [r3, #3]
			break;
 80052f0:	e047      	b.n	8005382 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	899b      	ldrh	r3, [r3, #12]
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4619      	mov	r1, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	fbb3 f3f1 	udiv	r3, r3, r1
 8005306:	4413      	add	r3, r2
 8005308:	4619      	mov	r1, r3
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff fd9a 	bl	8004e44 <move_window>
 8005310:	4603      	mov	r3, r0
 8005312:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d132      	bne.n	8005380 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	8992      	ldrh	r2, [r2, #12]
 800532e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005332:	fb02 f200 	mul.w	r2, r2, r0
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	440b      	add	r3, r1
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff faea 	bl	8004914 <ld_dword>
 8005340:	4603      	mov	r3, r0
 8005342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005346:	4323      	orrs	r3, r4
 8005348:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	8992      	ldrh	r2, [r2, #12]
 8005358:	fbb3 f0f2 	udiv	r0, r3, r2
 800535c:	fb02 f200 	mul.w	r2, r2, r0
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	440b      	add	r3, r1
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fb12 	bl	8004990 <st_dword>
			fs->wflag = 1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	70da      	strb	r2, [r3, #3]
			break;
 8005372:	e006      	b.n	8005382 <put_fat+0x224>
			if (res != FR_OK) break;
 8005374:	bf00      	nop
 8005376:	e004      	b.n	8005382 <put_fat+0x224>
			if (res != FR_OK) break;
 8005378:	bf00      	nop
 800537a:	e002      	b.n	8005382 <put_fat+0x224>
			if (res != FR_OK) break;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <put_fat+0x224>
			if (res != FR_OK) break;
 8005380:	bf00      	nop
		}
	}
	return res;
 8005382:	7ffb      	ldrb	r3, [r7, #31]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3724      	adds	r7, #36	; 0x24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}

0800538c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d904      	bls.n	80053b2 <remove_chain+0x26>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d301      	bcc.n	80053b6 <remove_chain+0x2a>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e04b      	b.n	800544e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	69b8      	ldr	r0, [r7, #24]
 80053c4:	f7ff fecb 	bl	800515e <put_fat>
 80053c8:	4603      	mov	r3, r0
 80053ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <remove_chain+0x4a>
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	e03b      	b.n	800544e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fdf0 	bl	8004fbe <get_fat>
 80053de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d031      	beq.n	800544a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <remove_chain+0x64>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e02e      	b.n	800544e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d101      	bne.n	80053fc <remove_chain+0x70>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e028      	b.n	800544e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053fc:	2200      	movs	r2, #0
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	69b8      	ldr	r0, [r7, #24]
 8005402:	f7ff feac 	bl	800515e <put_fat>
 8005406:	4603      	mov	r3, r0
 8005408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800540a:	7ffb      	ldrb	r3, [r7, #31]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <remove_chain+0x88>
 8005410:	7ffb      	ldrb	r3, [r7, #31]
 8005412:	e01c      	b.n	800544e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	3b02      	subs	r3, #2
 800541e:	429a      	cmp	r2, r3
 8005420:	d20b      	bcs.n	800543a <remove_chain+0xae>
			fs->free_clst++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	791b      	ldrb	r3, [r3, #4]
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	b2da      	uxtb	r2, r3
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3c6      	bcc.n	80053d6 <remove_chain+0x4a>
 8005448:	e000      	b.n	800544c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800544a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10d      	bne.n	8005488 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <create_chain+0x2c>
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	429a      	cmp	r2, r3
 8005480:	d31b      	bcc.n	80054ba <create_chain+0x64>
 8005482:	2301      	movs	r3, #1
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e018      	b.n	80054ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fd97 	bl	8004fbe <get_fat>
 8005490:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d801      	bhi.n	800549c <create_chain+0x46>
 8005498:	2301      	movs	r3, #1
 800549a:	e070      	b.n	800557e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d101      	bne.n	80054a8 <create_chain+0x52>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	e06a      	b.n	800557e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d201      	bcs.n	80054b6 <create_chain+0x60>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	e063      	b.n	800557e <create_chain+0x128>
		scl = clst;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3301      	adds	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d307      	bcc.n	80054de <create_chain+0x88>
				ncl = 2;
 80054ce:	2302      	movs	r3, #2
 80054d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d901      	bls.n	80054de <create_chain+0x88>
 80054da:	2300      	movs	r3, #0
 80054dc:	e04f      	b.n	800557e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80054de:	69f9      	ldr	r1, [r7, #28]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff fd6c 	bl	8004fbe <get_fat>
 80054e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d003      	beq.n	80054fc <create_chain+0xa6>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d101      	bne.n	8005500 <create_chain+0xaa>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	e03e      	b.n	800557e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d1da      	bne.n	80054be <create_chain+0x68>
 8005508:	2300      	movs	r3, #0
 800550a:	e038      	b.n	800557e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800550c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	69f9      	ldr	r1, [r7, #28]
 8005514:	6938      	ldr	r0, [r7, #16]
 8005516:	f7ff fe22 	bl	800515e <put_fat>
 800551a:	4603      	mov	r3, r0
 800551c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <create_chain+0xe2>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6938      	ldr	r0, [r7, #16]
 8005530:	f7ff fe15 	bl	800515e <put_fat>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d116      	bne.n	800556c <create_chain+0x116>
		fs->last_clst = ncl;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	3b02      	subs	r3, #2
 800554e:	429a      	cmp	r2, r3
 8005550:	d804      	bhi.n	800555c <create_chain+0x106>
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	791b      	ldrb	r3, [r3, #4]
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	711a      	strb	r2, [r3, #4]
 800556a:	e007      	b.n	800557c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <create_chain+0x122>
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	e000      	b.n	800557a <create_chain+0x124>
 8005578:	2301      	movs	r3, #1
 800557a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	3304      	adds	r3, #4
 800559c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	899b      	ldrh	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	8952      	ldrh	r2, [r2, #10]
 80055ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	613a      	str	r2, [r7, #16]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <clmt_clust+0x42>
 80055c4:	2300      	movs	r3, #0
 80055c6:	e010      	b.n	80055ea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d307      	bcc.n	80055e0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	3304      	adds	r3, #4
 80055dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80055de:	e7e9      	b.n	80055b4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80055e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560c:	d204      	bcs.n	8005618 <dir_sdi+0x22>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005618:	2302      	movs	r3, #2
 800561a:	e071      	b.n	8005700 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <dir_sdi+0x46>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	8912      	ldrh	r2, [r2, #8]
 800564a:	4293      	cmp	r3, r2
 800564c:	d301      	bcc.n	8005652 <dir_sdi+0x5c>
 800564e:	2302      	movs	r3, #2
 8005650:	e056      	b.n	8005700 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	61da      	str	r2, [r3, #28]
 800565a:	e02d      	b.n	80056b8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	895b      	ldrh	r3, [r3, #10]
 8005660:	461a      	mov	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	899b      	ldrh	r3, [r3, #12]
 8005666:	fb03 f302 	mul.w	r3, r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800566c:	e019      	b.n	80056a2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6979      	ldr	r1, [r7, #20]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fca3 	bl	8004fbe <get_fat>
 8005678:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d101      	bne.n	8005686 <dir_sdi+0x90>
 8005682:	2301      	movs	r3, #1
 8005684:	e03c      	b.n	8005700 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d904      	bls.n	8005696 <dir_sdi+0xa0>
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	429a      	cmp	r2, r3
 8005694:	d301      	bcc.n	800569a <dir_sdi+0xa4>
 8005696:	2302      	movs	r3, #2
 8005698:	e032      	b.n	8005700 <dir_sdi+0x10a>
			ofs -= csz;
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d2e1      	bcs.n	800566e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80056aa:	6979      	ldr	r1, [r7, #20]
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f7ff fc67 	bl	8004f80 <clust2sect>
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <dir_sdi+0xd4>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e01a      	b.n	8005700 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	899b      	ldrh	r3, [r3, #12]
 80056d2:	4619      	mov	r1, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056da:	441a      	add	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	899b      	ldrh	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80056f2:	fb02 f200 	mul.w	r2, r2, r0
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	18ca      	adds	r2, r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	3320      	adds	r3, #32
 800571e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <dir_next+0x28>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572e:	d301      	bcc.n	8005734 <dir_next+0x2c>
 8005730:	2304      	movs	r3, #4
 8005732:	e0bb      	b.n	80058ac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	899b      	ldrh	r3, [r3, #12]
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005740:	fb02 f201 	mul.w	r2, r2, r1
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 809d 	bne.w	8005886 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	8912      	ldrh	r2, [r2, #8]
 8005766:	4293      	cmp	r3, r2
 8005768:	f0c0 808d 	bcc.w	8005886 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
 8005772:	2304      	movs	r3, #4
 8005774:	e09a      	b.n	80058ac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	899b      	ldrh	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	8952      	ldrh	r2, [r2, #10]
 8005786:	3a01      	subs	r2, #1
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d17b      	bne.n	8005886 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7ff fc11 	bl	8004fbe <get_fat>
 800579c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d801      	bhi.n	80057a8 <dir_next+0xa0>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e081      	b.n	80058ac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d101      	bne.n	80057b4 <dir_next+0xac>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e07b      	b.n	80058ac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d359      	bcc.n	8005872 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	61da      	str	r2, [r3, #28]
 80057ca:	2304      	movs	r3, #4
 80057cc:	e06e      	b.n	80058ac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f7ff fe3d 	bl	8005456 <create_chain>
 80057dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <dir_next+0xe0>
 80057e4:	2307      	movs	r3, #7
 80057e6:	e061      	b.n	80058ac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <dir_next+0xea>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e05c      	b.n	80058ac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d101      	bne.n	80057fe <dir_next+0xf6>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e056      	b.n	80058ac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fadc 	bl	8004dbc <sync_window>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <dir_next+0x106>
 800580a:	2301      	movs	r3, #1
 800580c:	e04e      	b.n	80058ac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	899b      	ldrh	r3, [r3, #12]
 8005818:	461a      	mov	r2, r3
 800581a:	2100      	movs	r1, #0
 800581c:	f7ff f905 	bl	8004a2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	6979      	ldr	r1, [r7, #20]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fbaa 	bl	8004f80 <clust2sect>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
 8005832:	e012      	b.n	800585a <dir_next+0x152>
						fs->wflag = 1;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fabe 	bl	8004dbc <sync_window>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <dir_next+0x142>
 8005846:	2301      	movs	r3, #1
 8005848:	e030      	b.n	80058ac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3301      	adds	r3, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	895b      	ldrh	r3, [r3, #10]
 800585e:	461a      	mov	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4293      	cmp	r3, r2
 8005864:	d3e6      	bcc.n	8005834 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fb80 	bl	8004f80 <clust2sect>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	899b      	ldrh	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	fbb3 f0f2 	udiv	r0, r3, r2
 800589e:	fb02 f200 	mul.w	r2, r2, r0
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	18ca      	adds	r2, r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80058c4:	2100      	movs	r1, #0
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fe95 	bl	80055f6 <dir_sdi>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d12b      	bne.n	800592e <dir_alloc+0x7a>
		n = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4619      	mov	r1, r3
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff faaf 	bl	8004e44 <move_window>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11d      	bne.n	800592c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2be5      	cmp	r3, #229	; 0xe5
 80058f8:	d004      	beq.n	8005904 <dir_alloc+0x50>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	3301      	adds	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d102      	bne.n	8005918 <dir_alloc+0x64>
 8005912:	e00c      	b.n	800592e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005918:	2101      	movs	r1, #1
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fef4 	bl	8005708 <dir_next>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0d7      	beq.n	80058da <dir_alloc+0x26>
 800592a:	e000      	b.n	800592e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800592c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d101      	bne.n	8005938 <dir_alloc+0x84>
 8005934:	2307      	movs	r3, #7
 8005936:	75fb      	strb	r3, [r7, #23]
	return res;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	331a      	adds	r3, #26
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe ffc7 	bl	80048e4 <ld_word>
 8005956:	4603      	mov	r3, r0
 8005958:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b03      	cmp	r3, #3
 8005960:	d109      	bne.n	8005976 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe ffbc 	bl	80048e4 <ld_word>
 800596c:	4603      	mov	r3, r0
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	331a      	adds	r3, #26
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	b292      	uxth	r2, r2
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe ffdf 	bl	800495a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d109      	bne.n	80059b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f103 0214 	add.w	r2, r3, #20
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fe ffd1 	bl	800495a <st_word>
	}
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80059ca:	2304      	movs	r3, #4
 80059cc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80059d4:	e03c      	b.n	8005a50 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	4619      	mov	r1, r3
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f7ff fa31 	bl	8004e44 <move_window>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d136      	bne.n	8005a5a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80059fa:	2304      	movs	r3, #4
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	e031      	b.n	8005a64 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	330b      	adds	r3, #11
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0c:	73bb      	strb	r3, [r7, #14]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7bba      	ldrb	r2, [r7, #14]
 8005a12:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2be5      	cmp	r3, #229	; 0xe5
 8005a18:	d011      	beq.n	8005a3e <dir_read+0x7e>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a1e:	d00e      	beq.n	8005a3e <dir_read+0x7e>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d00b      	beq.n	8005a3e <dir_read+0x7e>
 8005a26:	7bbb      	ldrb	r3, [r7, #14]
 8005a28:	f023 0320 	bic.w	r3, r3, #32
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005a3e:	2100      	movs	r1, #0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fe61 	bl	8005708 <dir_next>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <dir_read+0xa2>
	while (dp->sect) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1be      	bne.n	80059d6 <dir_read+0x16>
 8005a58:	e004      	b.n	8005a64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <dir_read+0xa4>
				break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005a62:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <dir_read+0xb0>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	61da      	str	r2, [r3, #28]
	return res;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b086      	sub	sp, #24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005a88:	2100      	movs	r1, #0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fdb3 	bl	80055f6 <dir_sdi>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <dir_find+0x24>
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	e03e      	b.n	8005b1c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6938      	ldr	r0, [r7, #16]
 8005aa6:	f7ff f9cd 	bl	8004e44 <move_window>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d12f      	bne.n	8005b14 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <dir_find+0x4e>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	75fb      	strb	r3, [r7, #23]
 8005ac6:	e028      	b.n	8005b1a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	330b      	adds	r3, #11
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	330b      	adds	r3, #11
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <dir_find+0x86>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a18      	ldr	r0, [r3, #32]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3324      	adds	r3, #36	; 0x24
 8005af2:	220b      	movs	r2, #11
 8005af4:	4619      	mov	r1, r3
 8005af6:	f7fe ffb2 	bl	8004a5e <mem_cmp>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fe00 	bl	8005708 <dir_next>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c5      	beq.n	8005a9e <dir_find+0x24>
 8005b12:	e002      	b.n	8005b1a <dir_find+0xa0>
		if (res != FR_OK) break;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005b18:	bf00      	nop

	return res;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005b32:	2101      	movs	r1, #1
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff febd 	bl	80058b4 <dir_alloc>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11c      	bne.n	8005b7e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f7ff f97a 	bl	8004e44 <move_window>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d111      	bne.n	8005b7e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe ff61 	bl	8004a2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a18      	ldr	r0, [r3, #32]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	220b      	movs	r2, #11
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fe ff38 	bl	80049e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff f951 	bl	8004e44 <move_window>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	22e5      	movs	r2, #229	; 0xe5
 8005bb2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005bba:	7afb      	ldrb	r3, [r7, #11]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005bda:	220b      	movs	r2, #11
 8005bdc:	2120      	movs	r1, #32
 8005bde:	68b8      	ldr	r0, [r7, #8]
 8005be0:	f7fe ff23 	bl	8004a2a <mem_set>
	si = i = 0; ni = 8;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	2308      	movs	r3, #8
 8005bee:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	617a      	str	r2, [r7, #20]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bfe:	7ffb      	ldrb	r3, [r7, #31]
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d94e      	bls.n	8005ca2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	2b2f      	cmp	r3, #47	; 0x2f
 8005c08:	d006      	beq.n	8005c18 <create_name+0x54>
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8005c0e:	d110      	bne.n	8005c32 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c10:	e002      	b.n	8005c18 <create_name+0x54>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b2f      	cmp	r3, #47	; 0x2f
 8005c22:	d0f6      	beq.n	8005c12 <create_name+0x4e>
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b5c      	cmp	r3, #92	; 0x5c
 8005c2e:	d0f0      	beq.n	8005c12 <create_name+0x4e>
			break;
 8005c30:	e038      	b.n	8005ca4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
 8005c34:	2b2e      	cmp	r3, #46	; 0x2e
 8005c36:	d003      	beq.n	8005c40 <create_name+0x7c>
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d30c      	bcc.n	8005c5a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d002      	beq.n	8005c4c <create_name+0x88>
 8005c46:	7ffb      	ldrb	r3, [r7, #31]
 8005c48:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4a:	d001      	beq.n	8005c50 <create_name+0x8c>
 8005c4c:	2306      	movs	r3, #6
 8005c4e:	e044      	b.n	8005cda <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005c50:	2308      	movs	r3, #8
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	230b      	movs	r3, #11
 8005c56:	61bb      	str	r3, [r7, #24]
			continue;
 8005c58:	e022      	b.n	8005ca0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da04      	bge.n	8005c6c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
 8005c64:	3b80      	subs	r3, #128	; 0x80
 8005c66:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <create_name+0x120>)
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	481d      	ldr	r0, [pc, #116]	; (8005ce8 <create_name+0x124>)
 8005c72:	f7fe ff1b 	bl	8004aac <chk_chr>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <create_name+0xbc>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	e02c      	b.n	8005cda <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005c80:	7ffb      	ldrb	r3, [r7, #31]
 8005c82:	2b60      	cmp	r3, #96	; 0x60
 8005c84:	d905      	bls.n	8005c92 <create_name+0xce>
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b7a      	cmp	r3, #122	; 0x7a
 8005c8a:	d802      	bhi.n	8005c92 <create_name+0xce>
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	3b20      	subs	r3, #32
 8005c90:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	613a      	str	r2, [r7, #16]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	7ffa      	ldrb	r2, [r7, #31]
 8005c9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005ca0:	e7a6      	b.n	8005bf0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ca2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	441a      	add	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <create_name+0xf4>
 8005cb4:	2306      	movs	r3, #6
 8005cb6:	e010      	b.n	8005cda <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2be5      	cmp	r3, #229	; 0xe5
 8005cbe:	d102      	bne.n	8005cc6 <create_name+0x102>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d801      	bhi.n	8005cd0 <create_name+0x10c>
 8005ccc:	2204      	movs	r2, #4
 8005cce:	e000      	b.n	8005cd2 <create_name+0x10e>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	330b      	adds	r3, #11
 8005cd6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005cd8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	08008540 	.word	0x08008540
 8005ce8:	080084e4 	.word	0x080084e4

08005cec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005d00:	e002      	b.n	8005d08 <follow_path+0x1c>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d0e:	d0f8      	beq.n	8005d02 <follow_path+0x16>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b5c      	cmp	r3, #92	; 0x5c
 8005d16:	d0f4      	beq.n	8005d02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b1f      	cmp	r3, #31
 8005d24:	d80a      	bhi.n	8005d3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fc60 	bl	80055f6 <dir_sdi>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	e048      	b.n	8005dce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff3f 	bl	8005bc4 <create_name>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d139      	bne.n	8005dc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fe92 	bl	8005a7a <dir_find>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d12c      	bne.n	8005dc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d127      	bne.n	8005dc8 <follow_path+0xdc>
 8005d78:	2305      	movs	r3, #5
 8005d7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d7c:	e024      	b.n	8005dc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d121      	bne.n	8005dcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	799b      	ldrb	r3, [r3, #6]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d94:	2305      	movs	r3, #5
 8005d96:	75fb      	strb	r3, [r7, #23]
 8005d98:	e019      	b.n	8005dce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	8992      	ldrh	r2, [r2, #12]
 8005da8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dac:	fb02 f200 	mul.w	r2, r2, r0
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	440b      	add	r3, r1
 8005db4:	4619      	mov	r1, r3
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff fdc3 	bl	8005942 <ld_clust>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005dc2:	e7bb      	b.n	8005d3c <follow_path+0x50>
			if (res != FR_OK) break;
 8005dc4:	bf00      	nop
 8005dc6:	e002      	b.n	8005dce <follow_path+0xe2>
				break;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005dcc:	bf00      	nop
			}
		}
	}

	return res;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005de0:	f04f 33ff 	mov.w	r3, #4294967295
 8005de4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d031      	beq.n	8005e52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e002      	b.n	8005dfc <get_ldnumber+0x24>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d903      	bls.n	8005e0c <get_ldnumber+0x34>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b3a      	cmp	r3, #58	; 0x3a
 8005e0a:	d1f4      	bne.n	8005df6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b3a      	cmp	r3, #58	; 0x3a
 8005e12:	d11c      	bne.n	8005e4e <get_ldnumber+0x76>
			tp = *path;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	60fa      	str	r2, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	3b30      	subs	r3, #48	; 0x30
 8005e24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	d80e      	bhi.n	8005e4a <get_ldnumber+0x72>
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d10a      	bne.n	8005e4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <get_ldnumber+0x72>
					vol = (int)i;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	3301      	adds	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	e002      	b.n	8005e54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e52:	693b      	ldr	r3, [r7, #16]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	70da      	strb	r2, [r3, #3]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fe ffe2 	bl	8004e44 <move_window>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <check_fs+0x2a>
 8005e86:	2304      	movs	r3, #4
 8005e88:	e038      	b.n	8005efc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3334      	adds	r3, #52	; 0x34
 8005e8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fd26 	bl	80048e4 <ld_word>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d001      	beq.n	8005ea8 <check_fs+0x48>
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e029      	b.n	8005efc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eae:	2be9      	cmp	r3, #233	; 0xe9
 8005eb0:	d009      	beq.n	8005ec6 <check_fs+0x66>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eb8:	2beb      	cmp	r3, #235	; 0xeb
 8005eba:	d11e      	bne.n	8005efa <check_fs+0x9a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ec2:	2b90      	cmp	r3, #144	; 0x90
 8005ec4:	d119      	bne.n	8005efa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3334      	adds	r3, #52	; 0x34
 8005eca:	3336      	adds	r3, #54	; 0x36
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fd21 	bl	8004914 <ld_dword>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ed8:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <check_fs+0xa4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <check_fs+0x82>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e00c      	b.n	8005efc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3334      	adds	r3, #52	; 0x34
 8005ee6:	3352      	adds	r3, #82	; 0x52
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fd13 	bl	8004914 <ld_dword>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <check_fs+0xa8>)
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d101      	bne.n	8005efa <check_fs+0x9a>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005efa:	2302      	movs	r3, #2
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	00544146 	.word	0x00544146
 8005f08:	33544146 	.word	0x33544146

08005f0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b096      	sub	sp, #88	; 0x58
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff ff59 	bl	8005dd8 <get_ldnumber>
 8005f26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da01      	bge.n	8005f32 <find_volume+0x26>
 8005f2e:	230b      	movs	r3, #11
 8005f30:	e265      	b.n	80063fe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f32:	4ab0      	ldr	r2, [pc, #704]	; (80061f4 <find_volume+0x2e8>)
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <find_volume+0x3a>
 8005f42:	230c      	movs	r3, #12
 8005f44:	e25b      	b.n	80063fe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01a      	beq.n	8005f92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fc21 	bl	80047a8 <disk_status>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <find_volume+0x82>
 8005f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e237      	b.n	80063fe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e235      	b.n	80063fe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fc19 	bl	80047dc <disk_initialize>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e21e      	b.n	80063fe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <find_volume+0xca>
 8005fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	e213      	b.n	80063fe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	7858      	ldrb	r0, [r3, #1]
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	330c      	adds	r3, #12
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	f7fe fc61 	bl	80048a8 <disk_ioctl>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <find_volume+0xe4>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e206      	b.n	80063fe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	899b      	ldrh	r3, [r3, #12]
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	d80d      	bhi.n	8006016 <find_volume+0x10a>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	899b      	ldrh	r3, [r3, #12]
 8005ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006002:	d308      	bcc.n	8006016 <find_volume+0x10a>
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	899b      	ldrh	r3, [r3, #12]
 8006008:	461a      	mov	r2, r3
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	899b      	ldrh	r3, [r3, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <find_volume+0x10e>
 8006016:	2301      	movs	r3, #1
 8006018:	e1f1      	b.n	80063fe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800601e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006022:	f7ff ff1d 	bl	8005e60 <check_fs>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800602c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006030:	2b02      	cmp	r3, #2
 8006032:	d14b      	bne.n	80060cc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006034:	2300      	movs	r3, #0
 8006036:	643b      	str	r3, [r7, #64]	; 0x40
 8006038:	e01f      	b.n	800607a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006048:	4413      	add	r3, r2
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3304      	adds	r3, #4
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d006      	beq.n	8006064 <find_volume+0x158>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3308      	adds	r3, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc5a 	bl	8004914 <ld_dword>
 8006060:	4602      	mov	r2, r0
 8006062:	e000      	b.n	8006066 <find_volume+0x15a>
 8006064:	2200      	movs	r2, #0
 8006066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800606e:	440b      	add	r3, r1
 8006070:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006076:	3301      	adds	r3, #1
 8006078:	643b      	str	r3, [r7, #64]	; 0x40
 800607a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607c:	2b03      	cmp	r3, #3
 800607e:	d9dc      	bls.n	800603a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006080:	2300      	movs	r3, #0
 8006082:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <find_volume+0x184>
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	3b01      	subs	r3, #1
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006098:	4413      	add	r3, r2
 800609a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80060a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <find_volume+0x1a6>
 80060a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060aa:	f7ff fed9 	bl	8005e60 <check_fs>
 80060ae:	4603      	mov	r3, r0
 80060b0:	e000      	b.n	80060b4 <find_volume+0x1a8>
 80060b2:	2303      	movs	r3, #3
 80060b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80060b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d905      	bls.n	80060cc <find_volume+0x1c0>
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	3301      	adds	r3, #1
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d9e1      	bls.n	8006090 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d101      	bne.n	80060d8 <find_volume+0x1cc>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e192      	b.n	80063fe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d901      	bls.n	80060e4 <find_volume+0x1d8>
 80060e0:	230d      	movs	r3, #13
 80060e2:	e18c      	b.n	80063fe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	3334      	adds	r3, #52	; 0x34
 80060e8:	330b      	adds	r3, #11
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fbfa 	bl	80048e4 <ld_word>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	899b      	ldrh	r3, [r3, #12]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <find_volume+0x1f4>
 80060fc:	230d      	movs	r3, #13
 80060fe:	e17e      	b.n	80063fe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	3334      	adds	r3, #52	; 0x34
 8006104:	3316      	adds	r3, #22
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fbec 	bl	80048e4 <ld_word>
 800610c:	4603      	mov	r3, r0
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <find_volume+0x218>
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	3334      	adds	r3, #52	; 0x34
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fbf9 	bl	8004914 <ld_dword>
 8006122:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006128:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	789b      	ldrb	r3, [r3, #2]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d005      	beq.n	8006148 <find_volume+0x23c>
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	789b      	ldrb	r3, [r3, #2]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d001      	beq.n	8006148 <find_volume+0x23c>
 8006144:	230d      	movs	r3, #13
 8006146:	e15a      	b.n	80063fe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	789b      	ldrb	r3, [r3, #2]
 800614c:	461a      	mov	r2, r3
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615c:	b29a      	uxth	r2, r3
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	895b      	ldrh	r3, [r3, #10]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <find_volume+0x270>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	895b      	ldrh	r3, [r3, #10]
 800616e:	461a      	mov	r2, r3
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	895b      	ldrh	r3, [r3, #10]
 8006174:	3b01      	subs	r3, #1
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <find_volume+0x274>
 800617c:	230d      	movs	r3, #13
 800617e:	e13e      	b.n	80063fe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	3334      	adds	r3, #52	; 0x34
 8006184:	3311      	adds	r3, #17
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fbac 	bl	80048e4 <ld_word>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	891b      	ldrh	r3, [r3, #8]
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	8992      	ldrh	r2, [r2, #12]
 800619c:	0952      	lsrs	r2, r2, #5
 800619e:	b292      	uxth	r2, r2
 80061a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a4:	fb02 f201 	mul.w	r2, r2, r1
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <find_volume+0x2a8>
 80061b0:	230d      	movs	r3, #13
 80061b2:	e124      	b.n	80063fe <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	3334      	adds	r3, #52	; 0x34
 80061b8:	3313      	adds	r3, #19
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fb92 	bl	80048e4 <ld_word>
 80061c0:	4603      	mov	r3, r0
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <find_volume+0x2cc>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	3334      	adds	r3, #52	; 0x34
 80061ce:	3320      	adds	r3, #32
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fb9f 	bl	8004914 <ld_dword>
 80061d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	3334      	adds	r3, #52	; 0x34
 80061dc:	330e      	adds	r3, #14
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fb80 	bl	80048e4 <ld_word>
 80061e4:	4603      	mov	r3, r0
 80061e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <find_volume+0x2ec>
 80061ee:	230d      	movs	r3, #13
 80061f0:	e105      	b.n	80063fe <find_volume+0x4f2>
 80061f2:	bf00      	nop
 80061f4:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fc:	4413      	add	r3, r2
 80061fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006200:	8911      	ldrh	r1, [r2, #8]
 8006202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006204:	8992      	ldrh	r2, [r2, #12]
 8006206:	0952      	lsrs	r2, r2, #5
 8006208:	b292      	uxth	r2, r2
 800620a:	fbb1 f2f2 	udiv	r2, r1, r2
 800620e:	b292      	uxth	r2, r2
 8006210:	4413      	add	r3, r2
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	429a      	cmp	r2, r3
 800621a:	d201      	bcs.n	8006220 <find_volume+0x314>
 800621c:	230d      	movs	r3, #13
 800621e:	e0ee      	b.n	80063fe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006228:	8952      	ldrh	r2, [r2, #10]
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <find_volume+0x32e>
 8006236:	230d      	movs	r3, #13
 8006238:	e0e1      	b.n	80063fe <find_volume+0x4f2>
		fmt = FS_FAT32;
 800623a:	2303      	movs	r3, #3
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006246:	4293      	cmp	r3, r2
 8006248:	d802      	bhi.n	8006250 <find_volume+0x344>
 800624a:	2302      	movs	r3, #2
 800624c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006256:	4293      	cmp	r3, r2
 8006258:	d802      	bhi.n	8006260 <find_volume+0x354>
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	1c9a      	adds	r2, r3, #2
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800626c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800626e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006272:	441a      	add	r2, r3
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	441a      	add	r2, r3
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006286:	2b03      	cmp	r3, #3
 8006288:	d11e      	bne.n	80062c8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	3334      	adds	r3, #52	; 0x34
 800628e:	332a      	adds	r3, #42	; 0x2a
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fb27 	bl	80048e4 <ld_word>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <find_volume+0x394>
 800629c:	230d      	movs	r3, #13
 800629e:	e0ae      	b.n	80063fe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	891b      	ldrh	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <find_volume+0x3a0>
 80062a8:	230d      	movs	r3, #13
 80062aa:	e0a8      	b.n	80063fe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	3334      	adds	r3, #52	; 0x34
 80062b0:	332c      	adds	r3, #44	; 0x2c
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fb2e 	bl	8004914 <ld_dword>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
 80062c6:	e01f      	b.n	8006308 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	891b      	ldrh	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <find_volume+0x3c8>
 80062d0:	230d      	movs	r3, #13
 80062d2:	e094      	b.n	80063fe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062da:	441a      	add	r2, r3
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d103      	bne.n	80062f0 <find_volume+0x3e4>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	e00a      	b.n	8006306 <find_volume+0x3fa>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	085a      	lsrs	r2, r3, #1
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006306:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	899b      	ldrh	r3, [r3, #12]
 8006310:	4619      	mov	r1, r3
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	440b      	add	r3, r1
 8006316:	3b01      	subs	r3, #1
 8006318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800631a:	8989      	ldrh	r1, [r1, #12]
 800631c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006320:	429a      	cmp	r2, r3
 8006322:	d201      	bcs.n	8006328 <find_volume+0x41c>
 8006324:	230d      	movs	r3, #13
 8006326:	e06a      	b.n	80063fe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	615a      	str	r2, [r3, #20]
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	2280      	movs	r2, #128	; 0x80
 800633c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800633e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006342:	2b03      	cmp	r3, #3
 8006344:	d149      	bne.n	80063da <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	3334      	adds	r3, #52	; 0x34
 800634a:	3330      	adds	r3, #48	; 0x30
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe fac9 	bl	80048e4 <ld_word>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d140      	bne.n	80063da <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635a:	3301      	adds	r3, #1
 800635c:	4619      	mov	r1, r3
 800635e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006360:	f7fe fd70 	bl	8004e44 <move_window>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d137      	bne.n	80063da <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2200      	movs	r2, #0
 800636e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	3334      	adds	r3, #52	; 0x34
 8006374:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe fab3 	bl	80048e4 <ld_word>
 800637e:	4603      	mov	r3, r0
 8006380:	461a      	mov	r2, r3
 8006382:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006386:	429a      	cmp	r2, r3
 8006388:	d127      	bne.n	80063da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	3334      	adds	r3, #52	; 0x34
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fac0 	bl	8004914 <ld_dword>
 8006394:	4602      	mov	r2, r0
 8006396:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <find_volume+0x4fc>)
 8006398:	429a      	cmp	r2, r3
 800639a:	d11e      	bne.n	80063da <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	3334      	adds	r3, #52	; 0x34
 80063a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fab5 	bl	8004914 <ld_dword>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b17      	ldr	r3, [pc, #92]	; (800640c <find_volume+0x500>)
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d113      	bne.n	80063da <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	3334      	adds	r3, #52	; 0x34
 80063b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe faaa 	bl	8004914 <ld_dword>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	3334      	adds	r3, #52	; 0x34
 80063ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe faa0 	bl	8004914 <ld_dword>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <find_volume+0x504>)
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <find_volume+0x504>)
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	4b08      	ldr	r3, [pc, #32]	; (8006410 <find_volume+0x504>)
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80063f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063f8:	f7fe fcbc 	bl	8004d74 <clear_lock>
#endif
	return FR_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3758      	adds	r7, #88	; 0x58
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	41615252 	.word	0x41615252
 800640c:	61417272 	.word	0x61417272
 8006410:	200000b0 	.word	0x200000b0

08006414 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800641e:	2309      	movs	r3, #9
 8006420:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <validate+0x4e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d018      	beq.n	8006462 <validate+0x4e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d013      	beq.n	8006462 <validate+0x4e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	889a      	ldrh	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	88db      	ldrh	r3, [r3, #6]
 8006444:	429a      	cmp	r2, r3
 8006446:	d10c      	bne.n	8006462 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe f9aa 	bl	80047a8 <disk_status>
 8006454:	4603      	mov	r3, r0
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <validate+0x4e>
			res = FR_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <validate+0x5a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	e000      	b.n	8006470 <validate+0x5c>
 800646e:	2300      	movs	r3, #0
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	6013      	str	r3, [r2, #0]
	return res;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006492:	f107 0310 	add.w	r3, r7, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff fc9e 	bl	8005dd8 <get_ldnumber>
 800649c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da01      	bge.n	80064a8 <f_mount+0x28>
 80064a4:	230b      	movs	r3, #11
 80064a6:	e02b      	b.n	8006500 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80064a8:	4a17      	ldr	r2, [pc, #92]	; (8006508 <f_mount+0x88>)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80064b8:	69b8      	ldr	r0, [r7, #24]
 80064ba:	f7fe fc5b 	bl	8004d74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	490d      	ldr	r1, [pc, #52]	; (8006508 <f_mount+0x88>)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <f_mount+0x66>
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <f_mount+0x6a>
 80064e6:	2300      	movs	r3, #0
 80064e8:	e00a      	b.n	8006500 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80064ea:	f107 010c 	add.w	r1, r7, #12
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	2200      	movs	r2, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fd09 	bl	8005f0c <find_volume>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200000ac 	.word	0x200000ac

0800650c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b098      	sub	sp, #96	; 0x60
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <f_open+0x18>
 8006520:	2309      	movs	r3, #9
 8006522:	e1bb      	b.n	800689c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800652c:	79fa      	ldrb	r2, [r7, #7]
 800652e:	f107 0110 	add.w	r1, r7, #16
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fce8 	bl	8005f0c <find_volume>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006546:	2b00      	cmp	r3, #0
 8006548:	f040 819f 	bne.w	800688a <f_open+0x37e>
		dj.obj.fs = fs;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	f107 0314 	add.w	r3, r7, #20
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fbc7 	bl	8005cec <follow_path>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11a      	bne.n	80065a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800656c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006570:	b25b      	sxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	da03      	bge.n	800657e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006576:	2306      	movs	r3, #6
 8006578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800657c:	e011      	b.n	80065a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	f107 0314 	add.w	r3, r7, #20
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe faa4 	bl	8004ae4 <chk_lock>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	f003 031c 	and.w	r3, r3, #28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d07f      	beq.n	80066ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80065ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d017      	beq.n	80065e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80065b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d10e      	bne.n	80065da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80065bc:	f7fe faee 	bl	8004b9c <enq_lock>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <f_open+0xc8>
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff faaa 	bl	8005b24 <dir_register>
 80065d0:	4603      	mov	r3, r0
 80065d2:	e000      	b.n	80065d6 <f_open+0xca>
 80065d4:	2312      	movs	r3, #18
 80065d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	f043 0308 	orr.w	r3, r3, #8
 80065e0:	71fb      	strb	r3, [r7, #7]
 80065e2:	e010      	b.n	8006606 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80065e4:	7ebb      	ldrb	r3, [r7, #26]
 80065e6:	f003 0311 	and.w	r3, r3, #17
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <f_open+0xea>
					res = FR_DENIED;
 80065ee:	2307      	movs	r3, #7
 80065f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065f4:	e007      	b.n	8006606 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <f_open+0xfa>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d168      	bne.n	80066e0 <f_open+0x1d4>
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d063      	beq.n	80066e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006618:	f7fe f860 	bl	80046dc <get_fattime>
 800661c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	330e      	adds	r3, #14
 8006622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f9b3 	bl	8004990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	3316      	adds	r3, #22
 800662e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe f9ad 	bl	8004990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	330b      	adds	r3, #11
 800663a:	2220      	movs	r2, #32
 800663c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff f97c 	bl	8005942 <ld_clust>
 800664a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006650:	2200      	movs	r2, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff f994 	bl	8005980 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	331c      	adds	r3, #28
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe f996 	bl	8004990 <st_dword>
					fs->wflag = 1;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2201      	movs	r2, #1
 8006668:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d037      	beq.n	80066e0 <f_open+0x1d4>
						dw = fs->winsect;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006676:	f107 0314 	add.w	r3, r7, #20
 800667a:	2200      	movs	r2, #0
 800667c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fe84 	bl	800538c <remove_chain>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800668a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d126      	bne.n	80066e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fbd4 	bl	8004e44 <move_window>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066a6:	3a01      	subs	r2, #1
 80066a8:	611a      	str	r2, [r3, #16]
 80066aa:	e019      	b.n	80066e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80066ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d115      	bne.n	80066e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80066b4:	7ebb      	ldrb	r3, [r7, #26]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80066be:	2304      	movs	r3, #4
 80066c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80066c4:	e00c      	b.n	80066e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <f_open+0x1d4>
 80066d0:	7ebb      	ldrb	r3, [r7, #26]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <f_open+0x1d4>
						res = FR_DENIED;
 80066da:	2307      	movs	r3, #7
 80066dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80066e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d128      	bne.n	800673a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf14      	ite	ne
 8006712:	2301      	movne	r3, #1
 8006714:	2300      	moveq	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fa5d 	bl	8004be0 <inc_lock>
 8006726:	4602      	mov	r2, r0
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <f_open+0x22e>
 8006734:	2302      	movs	r3, #2
 8006736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800673a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 80a3 	bne.w	800688a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff f8f9 	bl	8005942 <ld_clust>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006758:	331c      	adds	r3, #28
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f8da 	bl	8004914 <ld_dword>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	88da      	ldrh	r2, [r3, #6]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f944 	bl	8004a2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d06e      	beq.n	800688a <f_open+0x37e>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d06a      	beq.n	800688a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	895b      	ldrh	r3, [r3, #10]
 80067c0:	461a      	mov	r2, r3
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	899b      	ldrh	r3, [r3, #12]
 80067c6:	fb03 f302 	mul.w	r3, r3, r2
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	657b      	str	r3, [r7, #84]	; 0x54
 80067d8:	e016      	b.n	8006808 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fbed 	bl	8004fbe <get_fat>
 80067e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80067e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d802      	bhi.n	80067f2 <f_open+0x2e6>
 80067ec:	2302      	movs	r3, #2
 80067ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80067f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d102      	bne.n	8006800 <f_open+0x2f4>
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	657b      	str	r3, [r7, #84]	; 0x54
 8006808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <f_open+0x30c>
 8006810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006814:	429a      	cmp	r2, r3
 8006816:	d8e0      	bhi.n	80067da <f_open+0x2ce>
				}
				fp->clust = clst;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800681e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006822:	2b00      	cmp	r3, #0
 8006824:	d131      	bne.n	800688a <f_open+0x37e>
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	899b      	ldrh	r3, [r3, #12]
 800682a:	461a      	mov	r2, r3
 800682c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006832:	fb02 f201 	mul.w	r2, r2, r1
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d026      	beq.n	800688a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fb9d 	bl	8004f80 <clust2sect>
 8006846:	6478      	str	r0, [r7, #68]	; 0x44
 8006848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <f_open+0x34a>
						res = FR_INT_ERR;
 800684e:	2302      	movs	r3, #2
 8006850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006854:	e019      	b.n	800688a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	899b      	ldrh	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	7858      	ldrb	r0, [r3, #1]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	2301      	movs	r3, #1
 800687a:	f7fd ffd5 	bl	8004828 <disk_read>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <f_open+0x37e>
 8006884:	2301      	movs	r3, #1
 8006886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800688a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <f_open+0x38c>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800689c:	4618      	mov	r0, r3
 800689e:	3760      	adds	r7, #96	; 0x60
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08e      	sub	sp, #56	; 0x38
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f107 0214 	add.w	r2, r7, #20
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fda5 	bl	8006414 <validate>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <f_read+0x44>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	7d5b      	ldrb	r3, [r3, #21]
 80068dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80068e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <f_read+0x4a>
 80068e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068ec:	e135      	b.n	8006b5a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7d1b      	ldrb	r3, [r3, #20]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <f_read+0x5a>
 80068fa:	2307      	movs	r3, #7
 80068fc:	e12d      	b.n	8006b5a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	429a      	cmp	r2, r3
 8006910:	f240 811e 	bls.w	8006b50 <f_read+0x2ac>
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006918:	e11a      	b.n	8006b50 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	8992      	ldrh	r2, [r2, #12]
 8006922:	fbb3 f1f2 	udiv	r1, r3, r2
 8006926:	fb02 f201 	mul.w	r2, r2, r1
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 80d5 	bne.w	8006adc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	8992      	ldrh	r2, [r2, #12]
 800693a:	fbb3 f3f2 	udiv	r3, r3, r2
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	8952      	ldrh	r2, [r2, #10]
 8006942:	3a01      	subs	r2, #1
 8006944:	4013      	ands	r3, r2
 8006946:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d12f      	bne.n	80069ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
 800695c:	e013      	b.n	8006986 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	4619      	mov	r1, r3
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7fe fe0a 	bl	8005586 <clmt_clust>
 8006972:	6338      	str	r0, [r7, #48]	; 0x30
 8006974:	e007      	b.n	8006986 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe fb1d 	bl	8004fbe <get_fat>
 8006984:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b01      	cmp	r3, #1
 800698a:	d804      	bhi.n	8006996 <f_read+0xf2>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2202      	movs	r2, #2
 8006990:	755a      	strb	r2, [r3, #21]
 8006992:	2302      	movs	r3, #2
 8006994:	e0e1      	b.n	8006b5a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d104      	bne.n	80069a8 <f_read+0x104>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	755a      	strb	r2, [r3, #21]
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0d8      	b.n	8006b5a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f7fe fae2 	bl	8004f80 <clust2sect>
 80069bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <f_read+0x12a>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2202      	movs	r2, #2
 80069c8:	755a      	strb	r2, [r3, #21]
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0c5      	b.n	8006b5a <f_read+0x2b6>
			sect += csect;
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	899b      	ldrh	r3, [r3, #12]
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d041      	beq.n	8006a6e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	4413      	add	r3, r2
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	8952      	ldrh	r2, [r2, #10]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d905      	bls.n	8006a04 <f_read+0x160>
					cc = fs->csize - csect;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	895b      	ldrh	r3, [r3, #10]
 80069fc:	461a      	mov	r2, r3
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	7858      	ldrb	r0, [r3, #1]
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a0e:	f7fd ff0b 	bl	8004828 <disk_read>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <f_read+0x17e>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	755a      	strb	r2, [r3, #21]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e09b      	b.n	8006b5a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	7d1b      	ldrb	r3, [r3, #20]
 8006a26:	b25b      	sxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da18      	bge.n	8006a5e <f_read+0x1ba>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1a      	ldr	r2, [r3, #32]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d911      	bls.n	8006a5e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	8992      	ldrh	r2, [r2, #12]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	18d0      	adds	r0, r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	899b      	ldrh	r3, [r3, #12]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f7fd ffc5 	bl	80049e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	899b      	ldrh	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006a6c:	e05c      	b.n	8006b28 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d02e      	beq.n	8006ad6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	7d1b      	ldrb	r3, [r3, #20]
 8006a7c:	b25b      	sxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da18      	bge.n	8006ab4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	7858      	ldrb	r0, [r3, #1]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	2301      	movs	r3, #1
 8006a92:	f7fd fee9 	bl	8004868 <disk_write>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <f_read+0x202>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	755a      	strb	r2, [r3, #21]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e059      	b.n	8006b5a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	7d1b      	ldrb	r3, [r3, #20]
 8006aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	7858      	ldrb	r0, [r3, #1]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006abe:	2301      	movs	r3, #1
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	f7fd feb1 	bl	8004828 <disk_read>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <f_read+0x232>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	755a      	strb	r2, [r3, #21]
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e041      	b.n	8006b5a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	899b      	ldrh	r3, [r3, #12]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	8992      	ldrh	r2, [r2, #12]
 8006aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aee:	fb02 f201 	mul.w	r2, r2, r1
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	1ac3      	subs	r3, r0, r3
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d901      	bls.n	8006b04 <f_read+0x260>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	8992      	ldrh	r2, [r2, #12]
 8006b12:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b16:	fb02 f200 	mul.w	r2, r2, r0
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b20:	4619      	mov	r1, r3
 8006b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b24:	f7fd ff60 	bl	80049e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	4413      	add	r3, r2
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	441a      	add	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	441a      	add	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f aee1 	bne.w	800691a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3738      	adds	r7, #56	; 0x38
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08c      	sub	sp, #48	; 0x30
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f107 0210 	add.w	r2, r7, #16
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fc46 	bl	8006414 <validate>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d107      	bne.n	8006ba6 <f_write+0x44>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	7d5b      	ldrb	r3, [r3, #21]
 8006b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <f_write+0x4a>
 8006ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006baa:	e16a      	b.n	8006e82 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	7d1b      	ldrb	r3, [r3, #20]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <f_write+0x5a>
 8006bb8:	2307      	movs	r3, #7
 8006bba:	e162      	b.n	8006e82 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	441a      	add	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	f080 814c 	bcs.w	8006e66 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006bd6:	e146      	b.n	8006e66 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	8992      	ldrh	r2, [r2, #12]
 8006be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006be4:	fb02 f201 	mul.w	r2, r2, r1
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 80f1 	bne.w	8006dd2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	8992      	ldrh	r2, [r2, #12]
 8006bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	8952      	ldrh	r2, [r2, #10]
 8006c00:	3a01      	subs	r2, #1
 8006c02:	4013      	ands	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d143      	bne.n	8006c94 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10c      	bne.n	8006c2e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11a      	bne.n	8006c56 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fc16 	bl	8005456 <create_chain>
 8006c2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8006c2c:	e013      	b.n	8006c56 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7fe fca2 	bl	8005586 <clmt_clust>
 8006c42:	62b8      	str	r0, [r7, #40]	; 0x28
 8006c44:	e007      	b.n	8006c56 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fe fc01 	bl	8005456 <create_chain>
 8006c54:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8109 	beq.w	8006e70 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d104      	bne.n	8006c6e <f_write+0x10c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2202      	movs	r2, #2
 8006c68:	755a      	strb	r2, [r3, #21]
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e109      	b.n	8006e82 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d104      	bne.n	8006c80 <f_write+0x11e>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	755a      	strb	r2, [r3, #21]
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e100      	b.n	8006e82 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c84:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <f_write+0x132>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c92:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7d1b      	ldrb	r3, [r3, #20]
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da18      	bge.n	8006cd0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	7858      	ldrb	r0, [r3, #1]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	2301      	movs	r3, #1
 8006cae:	f7fd fddb 	bl	8004868 <disk_write>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <f_write+0x160>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	755a      	strb	r2, [r3, #21]
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0df      	b.n	8006e82 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	7d1b      	ldrb	r3, [r3, #20]
 8006cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe f951 	bl	8004f80 <clust2sect>
 8006cde:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <f_write+0x18e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	755a      	strb	r2, [r3, #21]
 8006cec:	2302      	movs	r3, #2
 8006cee:	e0c8      	b.n	8006e82 <f_write+0x320>
			sect += csect;
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	899b      	ldrh	r3, [r3, #12]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d04:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d043      	beq.n	8006d94 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	4413      	add	r3, r2
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	8952      	ldrh	r2, [r2, #10]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d905      	bls.n	8006d26 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	895b      	ldrh	r3, [r3, #10]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	7858      	ldrb	r0, [r3, #1]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	69f9      	ldr	r1, [r7, #28]
 8006d30:	f7fd fd9a 	bl	8004868 <disk_write>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <f_write+0x1e2>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	755a      	strb	r2, [r3, #21]
 8006d40:	2301      	movs	r3, #1
 8006d42:	e09e      	b.n	8006e82 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d918      	bls.n	8006d84 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	8992      	ldrh	r2, [r2, #12]
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	18d1      	adds	r1, r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	899b      	ldrh	r3, [r3, #12]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f7fd fe39 	bl	80049e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	7d1b      	ldrb	r3, [r3, #20]
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	899b      	ldrh	r3, [r3, #12]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006d92:	e04b      	b.n	8006e2c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d016      	beq.n	8006dcc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d210      	bcs.n	8006dcc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	7858      	ldrb	r0, [r3, #1]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006db4:	2301      	movs	r3, #1
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	f7fd fd36 	bl	8004828 <disk_read>
 8006dbc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	755a      	strb	r2, [r3, #21]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e05a      	b.n	8006e82 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	899b      	ldrh	r3, [r3, #12]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	8992      	ldrh	r2, [r2, #12]
 8006de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006de4:	fb02 f201 	mul.w	r2, r2, r1
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	1ac3      	subs	r3, r0, r3
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d901      	bls.n	8006dfa <f_write+0x298>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	8992      	ldrh	r2, [r2, #12]
 8006e08:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e0c:	fb02 f200 	mul.w	r2, r2, r0
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	440b      	add	r3, r1
 8006e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e16:	69f9      	ldr	r1, [r7, #28]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fde5 	bl	80049e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	7d1b      	ldrb	r3, [r3, #20]
 8006e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	4413      	add	r3, r2
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	619a      	str	r2, [r3, #24]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bf38      	it	cc
 8006e4c:	461a      	movcc	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	441a      	add	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f aeb5 	bne.w	8006bd8 <f_write+0x76>
 8006e6e:	e000      	b.n	8006e72 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	7d1b      	ldrb	r3, [r3, #20]
 8006e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3730      	adds	r7, #48	; 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f107 0208 	add.w	r2, r7, #8
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff faba 	bl	8006414 <validate>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d168      	bne.n	8006f7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7d1b      	ldrb	r3, [r3, #20]
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d062      	beq.n	8006f7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da15      	bge.n	8006eec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7858      	ldrb	r0, [r3, #1]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1a      	ldr	r2, [r3, #32]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f7fd fcca 	bl	8004868 <disk_write>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <f_sync+0x54>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e04f      	b.n	8006f7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7d1b      	ldrb	r3, [r3, #20]
 8006ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006eec:	f7fd fbf6 	bl	80046dc <get_fattime>
 8006ef0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fd ffa2 	bl	8004e44 <move_window>
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d138      	bne.n	8006f7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	330b      	adds	r3, #11
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	330b      	adds	r3, #11
 8006f1a:	f042 0220 	orr.w	r2, r2, #32
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	f7fe fd27 	bl	8005980 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f103 021c 	add.w	r2, r3, #28
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7fd fd26 	bl	8004990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3316      	adds	r3, #22
 8006f48:	6939      	ldr	r1, [r7, #16]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fd fd20 	bl	8004990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3312      	adds	r3, #18
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fd fcff 	bl	800495a <st_word>
					fs->wflag = 1;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd ff9b 	bl	8004ea0 <sync_fs>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	7d1b      	ldrb	r3, [r3, #20]
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff7b 	bl	8006e8a <f_sync>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d118      	bne.n	8006fd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f107 0208 	add.w	r2, r7, #8
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fa34 	bl	8006414 <validate>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fd fe9e 	bl	8004cfc <dec_lock>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b090      	sub	sp, #64	; 0x40
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f107 0208 	add.w	r2, r7, #8
 8006fea:	4611      	mov	r1, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fa11 	bl	8006414 <validate>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <f_lseek+0x2e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7d5b      	ldrb	r3, [r3, #21]
 8007004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <f_lseek+0x3c>
 8007010:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007014:	e201      	b.n	800741a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80d9 	beq.w	80071d2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d15a      	bne.n	80070de <f_lseek+0x104>
			tbl = fp->cltbl;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	627a      	str	r2, [r7, #36]	; 0x24
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	2302      	movs	r3, #2
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	2b00      	cmp	r3, #0
 8007046:	d03a      	beq.n	80070be <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	2300      	movs	r3, #0
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	3302      	adds	r3, #2
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	3301      	adds	r3, #1
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd ffaa 	bl	8004fbe <get_fat>
 800706a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	2b01      	cmp	r3, #1
 8007070:	d804      	bhi.n	800707c <f_lseek+0xa2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	755a      	strb	r2, [r3, #21]
 8007078:	2302      	movs	r3, #2
 800707a:	e1ce      	b.n	800741a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d104      	bne.n	800708e <f_lseek+0xb4>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	755a      	strb	r2, [r3, #21]
 800708a:	2301      	movs	r3, #1
 800708c:	e1c5      	b.n	800741a <f_lseek+0x440>
					} while (cl == pcl + 1);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007094:	429a      	cmp	r2, r3
 8007096:	d0de      	beq.n	8007056 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	d809      	bhi.n	80070b4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	627a      	str	r2, [r7, #36]	; 0x24
 80070a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	627a      	str	r2, [r7, #36]	; 0x24
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d3c4      	bcc.n	8007048 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80070c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d803      	bhi.n	80070d6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e19f      	b.n	8007416 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80070d6:	2311      	movs	r3, #17
 80070d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80070dc:	e19b      	b.n	8007416 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d902      	bls.n	80070ee <f_lseek+0x114>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 818d 	beq.w	8007416 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	3b01      	subs	r3, #1
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe fa3f 	bl	8005586 <clmt_clust>
 8007108:	4602      	mov	r2, r0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fd ff32 	bl	8004f80 <clust2sect>
 800711c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <f_lseek+0x154>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	755a      	strb	r2, [r3, #21]
 800712a:	2302      	movs	r3, #2
 800712c:	e175      	b.n	800741a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	3b01      	subs	r3, #1
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	8992      	ldrh	r2, [r2, #12]
 8007136:	fbb3 f3f2 	udiv	r3, r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	8952      	ldrh	r2, [r2, #10]
 800713e:	3a01      	subs	r2, #1
 8007140:	4013      	ands	r3, r2
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	4413      	add	r3, r2
 8007146:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	8992      	ldrh	r2, [r2, #12]
 8007150:	fbb3 f1f2 	udiv	r1, r3, r2
 8007154:	fb02 f201 	mul.w	r2, r2, r1
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 815b 	beq.w	8007416 <f_lseek+0x43c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	429a      	cmp	r2, r3
 8007168:	f000 8155 	beq.w	8007416 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7d1b      	ldrb	r3, [r3, #20]
 8007170:	b25b      	sxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	da18      	bge.n	80071a8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	7858      	ldrb	r0, [r3, #1]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	2301      	movs	r3, #1
 8007186:	f7fd fb6f 	bl	8004868 <disk_write>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <f_lseek+0x1c0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	755a      	strb	r2, [r3, #21]
 8007196:	2301      	movs	r3, #1
 8007198:	e13f      	b.n	800741a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	7858      	ldrb	r0, [r3, #1]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071b2:	2301      	movs	r3, #1
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	f7fd fb37 	bl	8004828 <disk_read>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <f_lseek+0x1f0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	755a      	strb	r2, [r3, #21]
 80071c6:	2301      	movs	r3, #1
 80071c8:	e127      	b.n	800741a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	621a      	str	r2, [r3, #32]
 80071d0:	e121      	b.n	8007416 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d908      	bls.n	80071ee <f_lseek+0x214>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7d1b      	ldrb	r3, [r3, #20]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80b5 	beq.w	8007370 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	461a      	mov	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	899b      	ldrh	r3, [r3, #12]
 8007210:	fb03 f302 	mul.w	r3, r3, r2
 8007214:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01b      	beq.n	8007254 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	fbb2 f2f3 	udiv	r2, r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	1e59      	subs	r1, r3, #1
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007230:	429a      	cmp	r2, r3
 8007232:	d30f      	bcc.n	8007254 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	425b      	negs	r3, r3
 800723c:	401a      	ands	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	63bb      	str	r3, [r7, #56]	; 0x38
 8007252:	e022      	b.n	800729a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	d119      	bne.n	8007294 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2100      	movs	r1, #0
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe f8f6 	bl	8005456 <create_chain>
 800726a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	2b01      	cmp	r3, #1
 8007270:	d104      	bne.n	800727c <f_lseek+0x2a2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	755a      	strb	r2, [r3, #21]
 8007278:	2302      	movs	r3, #2
 800727a:	e0ce      	b.n	800741a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d104      	bne.n	800728e <f_lseek+0x2b4>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	755a      	strb	r2, [r3, #21]
 800728a:	2301      	movs	r3, #1
 800728c:	e0c5      	b.n	800741a <f_lseek+0x440>
					fp->obj.sclust = clst;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007292:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007298:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d067      	beq.n	8007370 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80072a0:	e03a      	b.n	8007318 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7d1b      	ldrb	r3, [r3, #20]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f8c5 	bl	8005456 <create_chain>
 80072cc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d108      	bne.n	80072e6 <f_lseek+0x30c>
							ofs = 0; break;
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	e022      	b.n	8007320 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fd fe6d 	bl	8004fbe <get_fat>
 80072e4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d104      	bne.n	80072f8 <f_lseek+0x31e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	755a      	strb	r2, [r3, #21]
 80072f4:	2301      	movs	r3, #1
 80072f6:	e090      	b.n	800741a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d904      	bls.n	8007308 <f_lseek+0x32e>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007304:	429a      	cmp	r2, r3
 8007306:	d304      	bcc.n	8007312 <f_lseek+0x338>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	755a      	strb	r2, [r3, #21]
 800730e:	2302      	movs	r3, #2
 8007310:	e083      	b.n	800741a <f_lseek+0x440>
					fp->clust = clst;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007316:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	429a      	cmp	r2, r3
 800731e:	d8c0      	bhi.n	80072a2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	441a      	add	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	899b      	ldrh	r3, [r3, #12]
 8007330:	461a      	mov	r2, r3
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	fbb3 f1f2 	udiv	r1, r3, r2
 8007338:	fb02 f201 	mul.w	r2, r2, r1
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007346:	4618      	mov	r0, r3
 8007348:	f7fd fe1a 	bl	8004f80 <clust2sect>
 800734c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <f_lseek+0x384>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	755a      	strb	r2, [r3, #21]
 800735a:	2302      	movs	r3, #2
 800735c:	e05d      	b.n	800741a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	899b      	ldrh	r3, [r3, #12]
 8007362:	461a      	mov	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	fbb3 f3f2 	udiv	r3, r3, r2
 800736a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736c:	4413      	add	r3, r2
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699a      	ldr	r2, [r3, #24]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d90a      	bls.n	8007392 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699a      	ldr	r2, [r3, #24]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7d1b      	ldrb	r3, [r3, #20]
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	8992      	ldrh	r2, [r2, #12]
 800739a:	fbb3 f1f2 	udiv	r1, r3, r2
 800739e:	fb02 f201 	mul.w	r2, r2, r1
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d036      	beq.n	8007416 <f_lseek+0x43c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d031      	beq.n	8007416 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7d1b      	ldrb	r3, [r3, #20]
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da18      	bge.n	80073ee <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	7858      	ldrb	r0, [r3, #1]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	2301      	movs	r3, #1
 80073cc:	f7fd fa4c 	bl	8004868 <disk_write>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <f_lseek+0x406>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	755a      	strb	r2, [r3, #21]
 80073dc:	2301      	movs	r3, #1
 80073de:	e01c      	b.n	800741a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7d1b      	ldrb	r3, [r3, #20]
 80073e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7858      	ldrb	r0, [r3, #1]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073f8:	2301      	movs	r3, #1
 80073fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fc:	f7fd fa14 	bl	8004828 <disk_read>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <f_lseek+0x436>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	755a      	strb	r2, [r3, #21]
 800740c:	2301      	movs	r3, #1
 800740e:	e004      	b.n	800741a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007414:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007416:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800741a:	4618      	mov	r0, r3
 800741c:	3740      	adds	r7, #64	; 0x40
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b092      	sub	sp, #72	; 0x48
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800742e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007432:	f107 030c 	add.w	r3, r7, #12
 8007436:	2200      	movs	r2, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fd67 	bl	8005f0c <find_volume>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007444:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 8099 	bne.w	8007580 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800744e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	695a      	ldr	r2, [r3, #20]
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	3b02      	subs	r3, #2
 800745e:	429a      	cmp	r2, r3
 8007460:	d804      	bhi.n	800746c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e089      	b.n	8007580 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d128      	bne.n	80074ca <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007478:	2302      	movs	r3, #2
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007486:	4618      	mov	r0, r3
 8007488:	f7fd fd99 	bl	8004fbe <get_fat>
 800748c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <f_getfree+0x7c>
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800749c:	e063      	b.n	8007566 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d103      	bne.n	80074ac <f_getfree+0x8a>
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80074aa:	e05c      	b.n	8007566 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <f_getfree+0x96>
 80074b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b4:	3301      	adds	r3, #1
 80074b6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80074b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ba:	3301      	adds	r3, #1
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d3db      	bcc.n	8007480 <f_getfree+0x5e>
 80074c8:	e04d      	b.n	8007566 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
 80074da:	2300      	movs	r3, #0
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d113      	bne.n	800750c <f_getfree+0xea>
							res = move_window(fs, sect++);
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80074ec:	4619      	mov	r1, r3
 80074ee:	f7fd fca9 	bl	8004e44 <move_window>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80074f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d131      	bne.n	8007564 <f_getfree+0x142>
							p = fs->win;
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	3334      	adds	r3, #52	; 0x34
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	899b      	ldrh	r3, [r3, #12]
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d10f      	bne.n	8007534 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007516:	f7fd f9e5 	bl	80048e4 <ld_word>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <f_getfree+0x104>
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	3301      	adds	r3, #1
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	3302      	adds	r3, #2
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	3b02      	subs	r3, #2
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
 8007532:	e010      	b.n	8007556 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007536:	f7fd f9ed 	bl	8004914 <ld_dword>
 800753a:	4603      	mov	r3, r0
 800753c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <f_getfree+0x128>
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	3301      	adds	r3, #1
 8007548:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	3304      	adds	r3, #4
 800754e:	633b      	str	r3, [r7, #48]	; 0x30
 8007550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007552:	3b04      	subs	r3, #4
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007558:	3b01      	subs	r3, #1
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800755c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1bd      	bne.n	80074de <f_getfree+0xbc>
 8007562:	e000      	b.n	8007566 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007564:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800756a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007570:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	791a      	ldrb	r2, [r3, #4]
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	f042 0201 	orr.w	r2, r2, #1
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007584:	4618      	mov	r0, r3
 8007586:	3748      	adds	r7, #72	; 0x48
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b09e      	sub	sp, #120	; 0x78
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007598:	f107 010c 	add.w	r1, r7, #12
 800759c:	1d3b      	adds	r3, r7, #4
 800759e:	2202      	movs	r2, #2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fcb3 	bl	8005f0c <find_volume>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80075b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 808e 	bne.w	80076d6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fb92 	bl	8005cec <follow_path>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80075ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <f_unlink+0x5c>
 80075d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075da:	2102      	movs	r1, #2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fd fa81 	bl	8004ae4 <chk_lock>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80075e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d172      	bne.n	80076d6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80075f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da03      	bge.n	8007602 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80075fa:	2306      	movs	r3, #6
 80075fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007600:	e008      	b.n	8007614 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007602:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800760e:	2307      	movs	r3, #7
 8007610:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8007614:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007618:	2b00      	cmp	r3, #0
 800761a:	d134      	bne.n	8007686 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f98d 	bl	8005942 <ld_clust>
 8007628:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800762a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b00      	cmp	r3, #0
 8007634:	d027      	beq.n	8007686 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800763a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800763c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800763e:	f107 0310 	add.w	r3, r7, #16
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd ffd6 	bl	80055f6 <dir_sdi>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8007650:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007654:	2b00      	cmp	r3, #0
 8007656:	d116      	bne.n	8007686 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007658:	f107 0310 	add.w	r3, r7, #16
 800765c:	2100      	movs	r1, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe f9ae 	bl	80059c0 <dir_read>
 8007664:	4603      	mov	r3, r0
 8007666:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800766a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <f_unlink+0xec>
 8007672:	2307      	movs	r3, #7
 8007674:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007678:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800767c:	2b04      	cmp	r3, #4
 800767e:	d102      	bne.n	8007686 <f_unlink+0xfa>
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8007686:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800768a:	2b00      	cmp	r3, #0
 800768c:	d123      	bne.n	80076d6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800768e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fa78 	bl	8005b88 <dir_remove>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800769e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10c      	bne.n	80076c0 <f_unlink+0x134>
 80076a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80076ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076b0:	2200      	movs	r2, #0
 80076b2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fe69 	bl	800538c <remove_chain>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80076c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <f_unlink+0x14a>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fd fbe8 	bl	8004ea0 <sync_fs>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80076d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3778      	adds	r7, #120	; 0x78
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b088      	sub	sp, #32
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
	int n = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80076f6:	e01b      	b.n	8007730 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80076f8:	f107 0310 	add.w	r3, r7, #16
 80076fc:	f107 0114 	add.w	r1, r7, #20
 8007700:	2201      	movs	r2, #1
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff f8ce 	bl	80068a4 <f_read>
		if (rc != 1) break;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d116      	bne.n	800773c <f_gets+0x5a>
		c = s[0];
 800770e:	7d3b      	ldrb	r3, [r7, #20]
 8007710:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b0d      	cmp	r3, #13
 8007716:	d100      	bne.n	800771a <f_gets+0x38>
 8007718:	e00a      	b.n	8007730 <f_gets+0x4e>
		*p++ = c;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	61ba      	str	r2, [r7, #24]
 8007720:	7dfa      	ldrb	r2, [r7, #23]
 8007722:	701a      	strb	r2, [r3, #0]
		n++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2b0a      	cmp	r3, #10
 800772e:	d007      	beq.n	8007740 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	429a      	cmp	r2, r3
 8007738:	dbde      	blt.n	80076f8 <f_gets+0x16>
 800773a:	e002      	b.n	8007742 <f_gets+0x60>
		if (rc != 1) break;
 800773c:	bf00      	nop
 800773e:	e000      	b.n	8007742 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007740:	bf00      	nop
	}
	*p = 0;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <f_gets+0x70>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	e000      	b.n	8007754 <f_gets+0x72>
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2b0a      	cmp	r3, #10
 800776c:	d103      	bne.n	8007776 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800776e:	210d      	movs	r1, #13
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fff3 	bl	800775c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	db25      	blt.n	80077ce <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	60fa      	str	r2, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b3c      	cmp	r3, #60	; 0x3c
 8007794:	dd12      	ble.n	80077bc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f103 010c 	add.w	r1, r3, #12
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	f7ff f9dc 	bl	8006b62 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d101      	bne.n	80077b6 <putc_bfd+0x5a>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e001      	b.n	80077ba <putc_bfd+0x5e>
 80077b6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ba:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	e000      	b.n	80077d0 <putc_bfd+0x74>
	if (i < 0) return;
 80077ce:	bf00      	nop
}
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	db17      	blt.n	8007816 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f103 010c 	add.w	r1, r3, #12
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f107 030c 	add.w	r3, r7, #12
 80077fa:	f7ff f9b2 	bl	8006b62 <f_write>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	461a      	mov	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	429a      	cmp	r2, r3
 800780e:	d102      	bne.n	8007816 <putc_flush+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	e001      	b.n	800781a <putc_flush+0x44>
	return EOF;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b096      	sub	sp, #88	; 0x58
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007856:	f107 030c 	add.w	r3, r7, #12
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff ffe0 	bl	8007822 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007862:	e009      	b.n	8007878 <f_puts+0x2c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	f107 030c 	add.w	r3, r7, #12
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff ff72 	bl	800775c <putc_bfd>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f1      	bne.n	8007864 <f_puts+0x18>
	return putc_flush(&pb);
 8007880:	f107 030c 	add.w	r3, r7, #12
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ffa6 	bl	80077d6 <putc_flush>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3758      	adds	r7, #88	; 0x58
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078aa:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078ac:	7a5b      	ldrb	r3, [r3, #9]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d131      	bne.n	8007918 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078b4:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078b6:	7a5b      	ldrb	r3, [r3, #9]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078be:	2100      	movs	r1, #0
 80078c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078c2:	4b19      	ldr	r3, [pc, #100]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078c4:	7a5b      	ldrb	r3, [r3, #9]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078d4:	7a5b      	ldrb	r3, [r3, #9]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	4b13      	ldr	r3, [pc, #76]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078dc:	4413      	add	r3, r2
 80078de:	79fa      	ldrb	r2, [r7, #7]
 80078e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078e4:	7a5b      	ldrb	r3, [r3, #9]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	b2d1      	uxtb	r1, r2
 80078ec:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <FATFS_LinkDriverEx+0x94>)
 80078ee:	7251      	strb	r1, [r2, #9]
 80078f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078f2:	7dbb      	ldrb	r3, [r7, #22]
 80078f4:	3330      	adds	r3, #48	; 0x30
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	3301      	adds	r3, #1
 8007900:	223a      	movs	r2, #58	; 0x3a
 8007902:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	3302      	adds	r3, #2
 8007908:	222f      	movs	r2, #47	; 0x2f
 800790a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3303      	adds	r3, #3
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
}
 800791a:	4618      	mov	r0, r3
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	200000d4 	.word	0x200000d4

0800792c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007936:	2200      	movs	r2, #0
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ffaa 	bl	8007894 <FATFS_LinkDriverEx>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <__errno>:
 800794c:	4b01      	ldr	r3, [pc, #4]	; (8007954 <__errno+0x8>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000024 	.word	0x20000024

08007958 <__libc_init_array>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4e0d      	ldr	r6, [pc, #52]	; (8007990 <__libc_init_array+0x38>)
 800795c:	4c0d      	ldr	r4, [pc, #52]	; (8007994 <__libc_init_array+0x3c>)
 800795e:	1ba4      	subs	r4, r4, r6
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	2500      	movs	r5, #0
 8007964:	42a5      	cmp	r5, r4
 8007966:	d109      	bne.n	800797c <__libc_init_array+0x24>
 8007968:	4e0b      	ldr	r6, [pc, #44]	; (8007998 <__libc_init_array+0x40>)
 800796a:	4c0c      	ldr	r4, [pc, #48]	; (800799c <__libc_init_array+0x44>)
 800796c:	f000 fc28 	bl	80081c0 <_init>
 8007970:	1ba4      	subs	r4, r4, r6
 8007972:	10a4      	asrs	r4, r4, #2
 8007974:	2500      	movs	r5, #0
 8007976:	42a5      	cmp	r5, r4
 8007978:	d105      	bne.n	8007986 <__libc_init_array+0x2e>
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007980:	4798      	blx	r3
 8007982:	3501      	adds	r5, #1
 8007984:	e7ee      	b.n	8007964 <__libc_init_array+0xc>
 8007986:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800798a:	4798      	blx	r3
 800798c:	3501      	adds	r5, #1
 800798e:	e7f2      	b.n	8007976 <__libc_init_array+0x1e>
 8007990:	080085fc 	.word	0x080085fc
 8007994:	080085fc 	.word	0x080085fc
 8007998:	080085fc 	.word	0x080085fc
 800799c:	08008600 	.word	0x08008600

080079a0 <memcpy>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	1e43      	subs	r3, r0, #1
 80079a4:	440a      	add	r2, r1
 80079a6:	4291      	cmp	r1, r2
 80079a8:	d100      	bne.n	80079ac <memcpy+0xc>
 80079aa:	bd10      	pop	{r4, pc}
 80079ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b4:	e7f7      	b.n	80079a6 <memcpy+0x6>

080079b6 <memset>:
 80079b6:	4402      	add	r2, r0
 80079b8:	4603      	mov	r3, r0
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d100      	bne.n	80079c0 <memset+0xa>
 80079be:	4770      	bx	lr
 80079c0:	f803 1b01 	strb.w	r1, [r3], #1
 80079c4:	e7f9      	b.n	80079ba <memset+0x4>
	...

080079c8 <siprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b500      	push	{lr}
 80079cc:	b09c      	sub	sp, #112	; 0x70
 80079ce:	ab1d      	add	r3, sp, #116	; 0x74
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079d8:	4809      	ldr	r0, [pc, #36]	; (8007a00 <siprintf+0x38>)
 80079da:	9107      	str	r1, [sp, #28]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	4909      	ldr	r1, [pc, #36]	; (8007a04 <siprintf+0x3c>)
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	6800      	ldr	r0, [r0, #0]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	a902      	add	r1, sp, #8
 80079ec:	f000 f866 	bl	8007abc <_svfiprintf_r>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	b01c      	add	sp, #112	; 0x70
 80079f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079fc:	b003      	add	sp, #12
 80079fe:	4770      	bx	lr
 8007a00:	20000024 	.word	0x20000024
 8007a04:	ffff0208 	.word	0xffff0208

08007a08 <__ssputs_r>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	688e      	ldr	r6, [r1, #8]
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	4682      	mov	sl, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	4690      	mov	r8, r2
 8007a16:	4699      	mov	r9, r3
 8007a18:	d837      	bhi.n	8007a8a <__ssputs_r+0x82>
 8007a1a:	898a      	ldrh	r2, [r1, #12]
 8007a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a20:	d031      	beq.n	8007a86 <__ssputs_r+0x7e>
 8007a22:	6825      	ldr	r5, [r4, #0]
 8007a24:	6909      	ldr	r1, [r1, #16]
 8007a26:	1a6f      	subs	r7, r5, r1
 8007a28:	6965      	ldr	r5, [r4, #20]
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a34:	f109 0301 	add.w	r3, r9, #1
 8007a38:	443b      	add	r3, r7
 8007a3a:	429d      	cmp	r5, r3
 8007a3c:	bf38      	it	cc
 8007a3e:	461d      	movcc	r5, r3
 8007a40:	0553      	lsls	r3, r2, #21
 8007a42:	d530      	bpl.n	8007aa6 <__ssputs_r+0x9e>
 8007a44:	4629      	mov	r1, r5
 8007a46:	f000 fb21 	bl	800808c <_malloc_r>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b950      	cbnz	r0, 8007a64 <__ssputs_r+0x5c>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	f8ca 3000 	str.w	r3, [sl]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	463a      	mov	r2, r7
 8007a66:	6921      	ldr	r1, [r4, #16]
 8007a68:	f7ff ff9a 	bl	80079a0 <memcpy>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	6126      	str	r6, [r4, #16]
 8007a7a:	6165      	str	r5, [r4, #20]
 8007a7c:	443e      	add	r6, r7
 8007a7e:	1bed      	subs	r5, r5, r7
 8007a80:	6026      	str	r6, [r4, #0]
 8007a82:	60a5      	str	r5, [r4, #8]
 8007a84:	464e      	mov	r6, r9
 8007a86:	454e      	cmp	r6, r9
 8007a88:	d900      	bls.n	8007a8c <__ssputs_r+0x84>
 8007a8a:	464e      	mov	r6, r9
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	4641      	mov	r1, r8
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	f000 fa93 	bl	8007fbc <memmove>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	1b9b      	subs	r3, r3, r6
 8007a9a:	60a3      	str	r3, [r4, #8]
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	441e      	add	r6, r3
 8007aa0:	6026      	str	r6, [r4, #0]
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e7dc      	b.n	8007a60 <__ssputs_r+0x58>
 8007aa6:	462a      	mov	r2, r5
 8007aa8:	f000 fb4a 	bl	8008140 <_realloc_r>
 8007aac:	4606      	mov	r6, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1e2      	bne.n	8007a78 <__ssputs_r+0x70>
 8007ab2:	6921      	ldr	r1, [r4, #16]
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f000 fa9b 	bl	8007ff0 <_free_r>
 8007aba:	e7c8      	b.n	8007a4e <__ssputs_r+0x46>

08007abc <_svfiprintf_r>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	461d      	mov	r5, r3
 8007ac2:	898b      	ldrh	r3, [r1, #12]
 8007ac4:	061f      	lsls	r7, r3, #24
 8007ac6:	b09d      	sub	sp, #116	; 0x74
 8007ac8:	4680      	mov	r8, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	4616      	mov	r6, r2
 8007ace:	d50f      	bpl.n	8007af0 <_svfiprintf_r+0x34>
 8007ad0:	690b      	ldr	r3, [r1, #16]
 8007ad2:	b96b      	cbnz	r3, 8007af0 <_svfiprintf_r+0x34>
 8007ad4:	2140      	movs	r1, #64	; 0x40
 8007ad6:	f000 fad9 	bl	800808c <_malloc_r>
 8007ada:	6020      	str	r0, [r4, #0]
 8007adc:	6120      	str	r0, [r4, #16]
 8007ade:	b928      	cbnz	r0, 8007aec <_svfiprintf_r+0x30>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	f8c8 3000 	str.w	r3, [r8]
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	e0c8      	b.n	8007c7e <_svfiprintf_r+0x1c2>
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	6163      	str	r3, [r4, #20]
 8007af0:	2300      	movs	r3, #0
 8007af2:	9309      	str	r3, [sp, #36]	; 0x24
 8007af4:	2320      	movs	r3, #32
 8007af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007afa:	2330      	movs	r3, #48	; 0x30
 8007afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b00:	9503      	str	r5, [sp, #12]
 8007b02:	f04f 0b01 	mov.w	fp, #1
 8007b06:	4637      	mov	r7, r6
 8007b08:	463d      	mov	r5, r7
 8007b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b0e:	b10b      	cbz	r3, 8007b14 <_svfiprintf_r+0x58>
 8007b10:	2b25      	cmp	r3, #37	; 0x25
 8007b12:	d13e      	bne.n	8007b92 <_svfiprintf_r+0xd6>
 8007b14:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b18:	d00b      	beq.n	8007b32 <_svfiprintf_r+0x76>
 8007b1a:	4653      	mov	r3, sl
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4640      	mov	r0, r8
 8007b22:	f7ff ff71 	bl	8007a08 <__ssputs_r>
 8007b26:	3001      	adds	r0, #1
 8007b28:	f000 80a4 	beq.w	8007c74 <_svfiprintf_r+0x1b8>
 8007b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2e:	4453      	add	r3, sl
 8007b30:	9309      	str	r3, [sp, #36]	; 0x24
 8007b32:	783b      	ldrb	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 809d 	beq.w	8007c74 <_svfiprintf_r+0x1b8>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	9307      	str	r3, [sp, #28]
 8007b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b4e:	462f      	mov	r7, r5
 8007b50:	2205      	movs	r2, #5
 8007b52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b56:	4850      	ldr	r0, [pc, #320]	; (8007c98 <_svfiprintf_r+0x1dc>)
 8007b58:	f7f8 fb7a 	bl	8000250 <memchr>
 8007b5c:	9b04      	ldr	r3, [sp, #16]
 8007b5e:	b9d0      	cbnz	r0, 8007b96 <_svfiprintf_r+0xda>
 8007b60:	06d9      	lsls	r1, r3, #27
 8007b62:	bf44      	itt	mi
 8007b64:	2220      	movmi	r2, #32
 8007b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b6a:	071a      	lsls	r2, r3, #28
 8007b6c:	bf44      	itt	mi
 8007b6e:	222b      	movmi	r2, #43	; 0x2b
 8007b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b74:	782a      	ldrb	r2, [r5, #0]
 8007b76:	2a2a      	cmp	r2, #42	; 0x2a
 8007b78:	d015      	beq.n	8007ba6 <_svfiprintf_r+0xea>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	462f      	mov	r7, r5
 8007b7e:	2000      	movs	r0, #0
 8007b80:	250a      	movs	r5, #10
 8007b82:	4639      	mov	r1, r7
 8007b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b88:	3b30      	subs	r3, #48	; 0x30
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	d94d      	bls.n	8007c2a <_svfiprintf_r+0x16e>
 8007b8e:	b1b8      	cbz	r0, 8007bc0 <_svfiprintf_r+0x104>
 8007b90:	e00f      	b.n	8007bb2 <_svfiprintf_r+0xf6>
 8007b92:	462f      	mov	r7, r5
 8007b94:	e7b8      	b.n	8007b08 <_svfiprintf_r+0x4c>
 8007b96:	4a40      	ldr	r2, [pc, #256]	; (8007c98 <_svfiprintf_r+0x1dc>)
 8007b98:	1a80      	subs	r0, r0, r2
 8007b9a:	fa0b f000 	lsl.w	r0, fp, r0
 8007b9e:	4318      	orrs	r0, r3
 8007ba0:	9004      	str	r0, [sp, #16]
 8007ba2:	463d      	mov	r5, r7
 8007ba4:	e7d3      	b.n	8007b4e <_svfiprintf_r+0x92>
 8007ba6:	9a03      	ldr	r2, [sp, #12]
 8007ba8:	1d11      	adds	r1, r2, #4
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	9103      	str	r1, [sp, #12]
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	db01      	blt.n	8007bb6 <_svfiprintf_r+0xfa>
 8007bb2:	9207      	str	r2, [sp, #28]
 8007bb4:	e004      	b.n	8007bc0 <_svfiprintf_r+0x104>
 8007bb6:	4252      	negs	r2, r2
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	9207      	str	r2, [sp, #28]
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	783b      	ldrb	r3, [r7, #0]
 8007bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bc4:	d10c      	bne.n	8007be0 <_svfiprintf_r+0x124>
 8007bc6:	787b      	ldrb	r3, [r7, #1]
 8007bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bca:	d133      	bne.n	8007c34 <_svfiprintf_r+0x178>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	9203      	str	r2, [sp, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfb8      	it	lt
 8007bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bdc:	3702      	adds	r7, #2
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	4d2e      	ldr	r5, [pc, #184]	; (8007c9c <_svfiprintf_r+0x1e0>)
 8007be2:	7839      	ldrb	r1, [r7, #0]
 8007be4:	2203      	movs	r2, #3
 8007be6:	4628      	mov	r0, r5
 8007be8:	f7f8 fb32 	bl	8000250 <memchr>
 8007bec:	b138      	cbz	r0, 8007bfe <_svfiprintf_r+0x142>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	1b40      	subs	r0, r0, r5
 8007bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	4303      	orrs	r3, r0
 8007bfa:	3701      	adds	r7, #1
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	7839      	ldrb	r1, [r7, #0]
 8007c00:	4827      	ldr	r0, [pc, #156]	; (8007ca0 <_svfiprintf_r+0x1e4>)
 8007c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c06:	2206      	movs	r2, #6
 8007c08:	1c7e      	adds	r6, r7, #1
 8007c0a:	f7f8 fb21 	bl	8000250 <memchr>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d038      	beq.n	8007c84 <_svfiprintf_r+0x1c8>
 8007c12:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <_svfiprintf_r+0x1e8>)
 8007c14:	bb13      	cbnz	r3, 8007c5c <_svfiprintf_r+0x1a0>
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	3307      	adds	r3, #7
 8007c1a:	f023 0307 	bic.w	r3, r3, #7
 8007c1e:	3308      	adds	r3, #8
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c24:	444b      	add	r3, r9
 8007c26:	9309      	str	r3, [sp, #36]	; 0x24
 8007c28:	e76d      	b.n	8007b06 <_svfiprintf_r+0x4a>
 8007c2a:	fb05 3202 	mla	r2, r5, r2, r3
 8007c2e:	2001      	movs	r0, #1
 8007c30:	460f      	mov	r7, r1
 8007c32:	e7a6      	b.n	8007b82 <_svfiprintf_r+0xc6>
 8007c34:	2300      	movs	r3, #0
 8007c36:	3701      	adds	r7, #1
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	250a      	movs	r5, #10
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c44:	3a30      	subs	r2, #48	; 0x30
 8007c46:	2a09      	cmp	r2, #9
 8007c48:	d903      	bls.n	8007c52 <_svfiprintf_r+0x196>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c8      	beq.n	8007be0 <_svfiprintf_r+0x124>
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	e7c6      	b.n	8007be0 <_svfiprintf_r+0x124>
 8007c52:	fb05 2101 	mla	r1, r5, r1, r2
 8007c56:	2301      	movs	r3, #1
 8007c58:	4607      	mov	r7, r0
 8007c5a:	e7f0      	b.n	8007c3e <_svfiprintf_r+0x182>
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	4622      	mov	r2, r4
 8007c62:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <_svfiprintf_r+0x1ec>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4640      	mov	r0, r8
 8007c68:	f3af 8000 	nop.w
 8007c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c70:	4681      	mov	r9, r0
 8007c72:	d1d6      	bne.n	8007c22 <_svfiprintf_r+0x166>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	065b      	lsls	r3, r3, #25
 8007c78:	f53f af35 	bmi.w	8007ae6 <_svfiprintf_r+0x2a>
 8007c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c7e:	b01d      	add	sp, #116	; 0x74
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	ab03      	add	r3, sp, #12
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <_svfiprintf_r+0x1ec>)
 8007c8c:	a904      	add	r1, sp, #16
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f000 f882 	bl	8007d98 <_printf_i>
 8007c94:	e7ea      	b.n	8007c6c <_svfiprintf_r+0x1b0>
 8007c96:	bf00      	nop
 8007c98:	080085c0 	.word	0x080085c0
 8007c9c:	080085c6 	.word	0x080085c6
 8007ca0:	080085ca 	.word	0x080085ca
 8007ca4:	00000000 	.word	0x00000000
 8007ca8:	08007a09 	.word	0x08007a09

08007cac <_printf_common>:
 8007cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	688a      	ldr	r2, [r1, #8]
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bfb8      	it	lt
 8007cc0:	4613      	movlt	r3, r2
 8007cc2:	f8c9 3000 	str.w	r3, [r9]
 8007cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	b112      	cbz	r2, 8007cd6 <_printf_common+0x2a>
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c9 3000 	str.w	r3, [r9]
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	0699      	lsls	r1, r3, #26
 8007cda:	bf42      	ittt	mi
 8007cdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ce0:	3302      	addmi	r3, #2
 8007ce2:	f8c9 3000 	strmi.w	r3, [r9]
 8007ce6:	6825      	ldr	r5, [r4, #0]
 8007ce8:	f015 0506 	ands.w	r5, r5, #6
 8007cec:	d107      	bne.n	8007cfe <_printf_common+0x52>
 8007cee:	f104 0a19 	add.w	sl, r4, #25
 8007cf2:	68e3      	ldr	r3, [r4, #12]
 8007cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	42ab      	cmp	r3, r5
 8007cfc:	dc28      	bgt.n	8007d50 <_printf_common+0xa4>
 8007cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	3300      	adds	r3, #0
 8007d06:	bf18      	it	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	0692      	lsls	r2, r2, #26
 8007d0c:	d42d      	bmi.n	8007d6a <_printf_common+0xbe>
 8007d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d12:	4639      	mov	r1, r7
 8007d14:	4630      	mov	r0, r6
 8007d16:	47c0      	blx	r8
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d020      	beq.n	8007d5e <_printf_common+0xb2>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	68e5      	ldr	r5, [r4, #12]
 8007d20:	f8d9 2000 	ldr.w	r2, [r9]
 8007d24:	f003 0306 	and.w	r3, r3, #6
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	bf08      	it	eq
 8007d2c:	1aad      	subeq	r5, r5, r2
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	6922      	ldr	r2, [r4, #16]
 8007d32:	bf0c      	ite	eq
 8007d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d38:	2500      	movne	r5, #0
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bfc4      	itt	gt
 8007d3e:	1a9b      	subgt	r3, r3, r2
 8007d40:	18ed      	addgt	r5, r5, r3
 8007d42:	f04f 0900 	mov.w	r9, #0
 8007d46:	341a      	adds	r4, #26
 8007d48:	454d      	cmp	r5, r9
 8007d4a:	d11a      	bne.n	8007d82 <_printf_common+0xd6>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e008      	b.n	8007d62 <_printf_common+0xb6>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4652      	mov	r2, sl
 8007d54:	4639      	mov	r1, r7
 8007d56:	4630      	mov	r0, r6
 8007d58:	47c0      	blx	r8
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d103      	bne.n	8007d66 <_printf_common+0xba>
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d66:	3501      	adds	r5, #1
 8007d68:	e7c3      	b.n	8007cf2 <_printf_common+0x46>
 8007d6a:	18e1      	adds	r1, r4, r3
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	2030      	movs	r0, #48	; 0x30
 8007d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d74:	4422      	add	r2, r4
 8007d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d7e:	3302      	adds	r3, #2
 8007d80:	e7c5      	b.n	8007d0e <_printf_common+0x62>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4622      	mov	r2, r4
 8007d86:	4639      	mov	r1, r7
 8007d88:	4630      	mov	r0, r6
 8007d8a:	47c0      	blx	r8
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d0e6      	beq.n	8007d5e <_printf_common+0xb2>
 8007d90:	f109 0901 	add.w	r9, r9, #1
 8007d94:	e7d8      	b.n	8007d48 <_printf_common+0x9c>
	...

08007d98 <_printf_i>:
 8007d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007da0:	460c      	mov	r4, r1
 8007da2:	7e09      	ldrb	r1, [r1, #24]
 8007da4:	b085      	sub	sp, #20
 8007da6:	296e      	cmp	r1, #110	; 0x6e
 8007da8:	4617      	mov	r7, r2
 8007daa:	4606      	mov	r6, r0
 8007dac:	4698      	mov	r8, r3
 8007dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007db0:	f000 80b3 	beq.w	8007f1a <_printf_i+0x182>
 8007db4:	d822      	bhi.n	8007dfc <_printf_i+0x64>
 8007db6:	2963      	cmp	r1, #99	; 0x63
 8007db8:	d036      	beq.n	8007e28 <_printf_i+0x90>
 8007dba:	d80a      	bhi.n	8007dd2 <_printf_i+0x3a>
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	f000 80b9 	beq.w	8007f34 <_printf_i+0x19c>
 8007dc2:	2958      	cmp	r1, #88	; 0x58
 8007dc4:	f000 8083 	beq.w	8007ece <_printf_i+0x136>
 8007dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007dd0:	e032      	b.n	8007e38 <_printf_i+0xa0>
 8007dd2:	2964      	cmp	r1, #100	; 0x64
 8007dd4:	d001      	beq.n	8007dda <_printf_i+0x42>
 8007dd6:	2969      	cmp	r1, #105	; 0x69
 8007dd8:	d1f6      	bne.n	8007dc8 <_printf_i+0x30>
 8007dda:	6820      	ldr	r0, [r4, #0]
 8007ddc:	6813      	ldr	r3, [r2, #0]
 8007dde:	0605      	lsls	r5, r0, #24
 8007de0:	f103 0104 	add.w	r1, r3, #4
 8007de4:	d52a      	bpl.n	8007e3c <_printf_i+0xa4>
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6011      	str	r1, [r2, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da03      	bge.n	8007df6 <_printf_i+0x5e>
 8007dee:	222d      	movs	r2, #45	; 0x2d
 8007df0:	425b      	negs	r3, r3
 8007df2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007df6:	486f      	ldr	r0, [pc, #444]	; (8007fb4 <_printf_i+0x21c>)
 8007df8:	220a      	movs	r2, #10
 8007dfa:	e039      	b.n	8007e70 <_printf_i+0xd8>
 8007dfc:	2973      	cmp	r1, #115	; 0x73
 8007dfe:	f000 809d 	beq.w	8007f3c <_printf_i+0x1a4>
 8007e02:	d808      	bhi.n	8007e16 <_printf_i+0x7e>
 8007e04:	296f      	cmp	r1, #111	; 0x6f
 8007e06:	d020      	beq.n	8007e4a <_printf_i+0xb2>
 8007e08:	2970      	cmp	r1, #112	; 0x70
 8007e0a:	d1dd      	bne.n	8007dc8 <_printf_i+0x30>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	f043 0320 	orr.w	r3, r3, #32
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	e003      	b.n	8007e1e <_printf_i+0x86>
 8007e16:	2975      	cmp	r1, #117	; 0x75
 8007e18:	d017      	beq.n	8007e4a <_printf_i+0xb2>
 8007e1a:	2978      	cmp	r1, #120	; 0x78
 8007e1c:	d1d4      	bne.n	8007dc8 <_printf_i+0x30>
 8007e1e:	2378      	movs	r3, #120	; 0x78
 8007e20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e24:	4864      	ldr	r0, [pc, #400]	; (8007fb8 <_printf_i+0x220>)
 8007e26:	e055      	b.n	8007ed4 <_printf_i+0x13c>
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	1d19      	adds	r1, r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6011      	str	r1, [r2, #0]
 8007e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e08c      	b.n	8007f56 <_printf_i+0x1be>
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6011      	str	r1, [r2, #0]
 8007e40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e44:	bf18      	it	ne
 8007e46:	b21b      	sxthne	r3, r3
 8007e48:	e7cf      	b.n	8007dea <_printf_i+0x52>
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	1d18      	adds	r0, r3, #4
 8007e50:	6010      	str	r0, [r2, #0]
 8007e52:	0628      	lsls	r0, r5, #24
 8007e54:	d501      	bpl.n	8007e5a <_printf_i+0xc2>
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	e002      	b.n	8007e60 <_printf_i+0xc8>
 8007e5a:	0668      	lsls	r0, r5, #25
 8007e5c:	d5fb      	bpl.n	8007e56 <_printf_i+0xbe>
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	4854      	ldr	r0, [pc, #336]	; (8007fb4 <_printf_i+0x21c>)
 8007e62:	296f      	cmp	r1, #111	; 0x6f
 8007e64:	bf14      	ite	ne
 8007e66:	220a      	movne	r2, #10
 8007e68:	2208      	moveq	r2, #8
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e70:	6865      	ldr	r5, [r4, #4]
 8007e72:	60a5      	str	r5, [r4, #8]
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	f2c0 8095 	blt.w	8007fa4 <_printf_i+0x20c>
 8007e7a:	6821      	ldr	r1, [r4, #0]
 8007e7c:	f021 0104 	bic.w	r1, r1, #4
 8007e80:	6021      	str	r1, [r4, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d13d      	bne.n	8007f02 <_printf_i+0x16a>
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	f040 808e 	bne.w	8007fa8 <_printf_i+0x210>
 8007e8c:	4665      	mov	r5, ip
 8007e8e:	2a08      	cmp	r2, #8
 8007e90:	d10b      	bne.n	8007eaa <_printf_i+0x112>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	07db      	lsls	r3, r3, #31
 8007e96:	d508      	bpl.n	8007eaa <_printf_i+0x112>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bfde      	ittt	le
 8007ea0:	2330      	movle	r3, #48	; 0x30
 8007ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007eaa:	ebac 0305 	sub.w	r3, ip, r5
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	f8cd 8000 	str.w	r8, [sp]
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	aa03      	add	r2, sp, #12
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff fef6 	bl	8007cac <_printf_common>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d14d      	bne.n	8007f60 <_printf_i+0x1c8>
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	b005      	add	sp, #20
 8007eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ece:	4839      	ldr	r0, [pc, #228]	; (8007fb4 <_printf_i+0x21c>)
 8007ed0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	6821      	ldr	r1, [r4, #0]
 8007ed8:	1d1d      	adds	r5, r3, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6015      	str	r5, [r2, #0]
 8007ede:	060a      	lsls	r2, r1, #24
 8007ee0:	d50b      	bpl.n	8007efa <_printf_i+0x162>
 8007ee2:	07ca      	lsls	r2, r1, #31
 8007ee4:	bf44      	itt	mi
 8007ee6:	f041 0120 	orrmi.w	r1, r1, #32
 8007eea:	6021      	strmi	r1, [r4, #0]
 8007eec:	b91b      	cbnz	r3, 8007ef6 <_printf_i+0x15e>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	f022 0220 	bic.w	r2, r2, #32
 8007ef4:	6022      	str	r2, [r4, #0]
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	e7b7      	b.n	8007e6a <_printf_i+0xd2>
 8007efa:	064d      	lsls	r5, r1, #25
 8007efc:	bf48      	it	mi
 8007efe:	b29b      	uxthmi	r3, r3
 8007f00:	e7ef      	b.n	8007ee2 <_printf_i+0x14a>
 8007f02:	4665      	mov	r5, ip
 8007f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f08:	fb02 3311 	mls	r3, r2, r1, r3
 8007f0c:	5cc3      	ldrb	r3, [r0, r3]
 8007f0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f12:	460b      	mov	r3, r1
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d1f5      	bne.n	8007f04 <_printf_i+0x16c>
 8007f18:	e7b9      	b.n	8007e8e <_printf_i+0xf6>
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	6825      	ldr	r5, [r4, #0]
 8007f1e:	6961      	ldr	r1, [r4, #20]
 8007f20:	1d18      	adds	r0, r3, #4
 8007f22:	6010      	str	r0, [r2, #0]
 8007f24:	0628      	lsls	r0, r5, #24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	d501      	bpl.n	8007f2e <_printf_i+0x196>
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	e002      	b.n	8007f34 <_printf_i+0x19c>
 8007f2e:	066a      	lsls	r2, r5, #25
 8007f30:	d5fb      	bpl.n	8007f2a <_printf_i+0x192>
 8007f32:	8019      	strh	r1, [r3, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	4665      	mov	r5, ip
 8007f3a:	e7b9      	b.n	8007eb0 <_printf_i+0x118>
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	1d19      	adds	r1, r3, #4
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	681d      	ldr	r5, [r3, #0]
 8007f44:	6862      	ldr	r2, [r4, #4]
 8007f46:	2100      	movs	r1, #0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7f8 f981 	bl	8000250 <memchr>
 8007f4e:	b108      	cbz	r0, 8007f54 <_printf_i+0x1bc>
 8007f50:	1b40      	subs	r0, r0, r5
 8007f52:	6060      	str	r0, [r4, #4]
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5e:	e7a7      	b.n	8007eb0 <_printf_i+0x118>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	462a      	mov	r2, r5
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	47c0      	blx	r8
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d0aa      	beq.n	8007ec4 <_printf_i+0x12c>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	079b      	lsls	r3, r3, #30
 8007f72:	d413      	bmi.n	8007f9c <_printf_i+0x204>
 8007f74:	68e0      	ldr	r0, [r4, #12]
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	4298      	cmp	r0, r3
 8007f7a:	bfb8      	it	lt
 8007f7c:	4618      	movlt	r0, r3
 8007f7e:	e7a3      	b.n	8007ec8 <_printf_i+0x130>
 8007f80:	2301      	movs	r3, #1
 8007f82:	464a      	mov	r2, r9
 8007f84:	4639      	mov	r1, r7
 8007f86:	4630      	mov	r0, r6
 8007f88:	47c0      	blx	r8
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d09a      	beq.n	8007ec4 <_printf_i+0x12c>
 8007f8e:	3501      	adds	r5, #1
 8007f90:	68e3      	ldr	r3, [r4, #12]
 8007f92:	9a03      	ldr	r2, [sp, #12]
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	42ab      	cmp	r3, r5
 8007f98:	dcf2      	bgt.n	8007f80 <_printf_i+0x1e8>
 8007f9a:	e7eb      	b.n	8007f74 <_printf_i+0x1dc>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	f104 0919 	add.w	r9, r4, #25
 8007fa2:	e7f5      	b.n	8007f90 <_printf_i+0x1f8>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1ac      	bne.n	8007f02 <_printf_i+0x16a>
 8007fa8:	7803      	ldrb	r3, [r0, #0]
 8007faa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb2:	e76c      	b.n	8007e8e <_printf_i+0xf6>
 8007fb4:	080085d1 	.word	0x080085d1
 8007fb8:	080085e2 	.word	0x080085e2

08007fbc <memmove>:
 8007fbc:	4288      	cmp	r0, r1
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	eb01 0302 	add.w	r3, r1, r2
 8007fc4:	d807      	bhi.n	8007fd6 <memmove+0x1a>
 8007fc6:	1e42      	subs	r2, r0, #1
 8007fc8:	4299      	cmp	r1, r3
 8007fca:	d00a      	beq.n	8007fe2 <memmove+0x26>
 8007fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fd4:	e7f8      	b.n	8007fc8 <memmove+0xc>
 8007fd6:	4283      	cmp	r3, r0
 8007fd8:	d9f5      	bls.n	8007fc6 <memmove+0xa>
 8007fda:	1881      	adds	r1, r0, r2
 8007fdc:	1ad2      	subs	r2, r2, r3
 8007fde:	42d3      	cmn	r3, r2
 8007fe0:	d100      	bne.n	8007fe4 <memmove+0x28>
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fe8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fec:	e7f7      	b.n	8007fde <memmove+0x22>
	...

08007ff0 <_free_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d045      	beq.n	8008084 <_free_r+0x94>
 8007ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffc:	1f0c      	subs	r4, r1, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfb8      	it	lt
 8008002:	18e4      	addlt	r4, r4, r3
 8008004:	f000 f8d2 	bl	80081ac <__malloc_lock>
 8008008:	4a1f      	ldr	r2, [pc, #124]	; (8008088 <_free_r+0x98>)
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	4610      	mov	r0, r2
 800800e:	b933      	cbnz	r3, 800801e <_free_r+0x2e>
 8008010:	6063      	str	r3, [r4, #4]
 8008012:	6014      	str	r4, [r2, #0]
 8008014:	4628      	mov	r0, r5
 8008016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800801a:	f000 b8c8 	b.w	80081ae <__malloc_unlock>
 800801e:	42a3      	cmp	r3, r4
 8008020:	d90c      	bls.n	800803c <_free_r+0x4c>
 8008022:	6821      	ldr	r1, [r4, #0]
 8008024:	1862      	adds	r2, r4, r1
 8008026:	4293      	cmp	r3, r2
 8008028:	bf04      	itt	eq
 800802a:	681a      	ldreq	r2, [r3, #0]
 800802c:	685b      	ldreq	r3, [r3, #4]
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	bf04      	itt	eq
 8008032:	1852      	addeq	r2, r2, r1
 8008034:	6022      	streq	r2, [r4, #0]
 8008036:	6004      	str	r4, [r0, #0]
 8008038:	e7ec      	b.n	8008014 <_free_r+0x24>
 800803a:	4613      	mov	r3, r2
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	b10a      	cbz	r2, 8008044 <_free_r+0x54>
 8008040:	42a2      	cmp	r2, r4
 8008042:	d9fa      	bls.n	800803a <_free_r+0x4a>
 8008044:	6819      	ldr	r1, [r3, #0]
 8008046:	1858      	adds	r0, r3, r1
 8008048:	42a0      	cmp	r0, r4
 800804a:	d10b      	bne.n	8008064 <_free_r+0x74>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	4401      	add	r1, r0
 8008050:	1858      	adds	r0, r3, r1
 8008052:	4282      	cmp	r2, r0
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	d1dd      	bne.n	8008014 <_free_r+0x24>
 8008058:	6810      	ldr	r0, [r2, #0]
 800805a:	6852      	ldr	r2, [r2, #4]
 800805c:	605a      	str	r2, [r3, #4]
 800805e:	4401      	add	r1, r0
 8008060:	6019      	str	r1, [r3, #0]
 8008062:	e7d7      	b.n	8008014 <_free_r+0x24>
 8008064:	d902      	bls.n	800806c <_free_r+0x7c>
 8008066:	230c      	movs	r3, #12
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	e7d3      	b.n	8008014 <_free_r+0x24>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	1821      	adds	r1, r4, r0
 8008070:	428a      	cmp	r2, r1
 8008072:	bf04      	itt	eq
 8008074:	6811      	ldreq	r1, [r2, #0]
 8008076:	6852      	ldreq	r2, [r2, #4]
 8008078:	6062      	str	r2, [r4, #4]
 800807a:	bf04      	itt	eq
 800807c:	1809      	addeq	r1, r1, r0
 800807e:	6021      	streq	r1, [r4, #0]
 8008080:	605c      	str	r4, [r3, #4]
 8008082:	e7c7      	b.n	8008014 <_free_r+0x24>
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	200000e0 	.word	0x200000e0

0800808c <_malloc_r>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	1ccd      	adds	r5, r1, #3
 8008090:	f025 0503 	bic.w	r5, r5, #3
 8008094:	3508      	adds	r5, #8
 8008096:	2d0c      	cmp	r5, #12
 8008098:	bf38      	it	cc
 800809a:	250c      	movcc	r5, #12
 800809c:	2d00      	cmp	r5, #0
 800809e:	4606      	mov	r6, r0
 80080a0:	db01      	blt.n	80080a6 <_malloc_r+0x1a>
 80080a2:	42a9      	cmp	r1, r5
 80080a4:	d903      	bls.n	80080ae <_malloc_r+0x22>
 80080a6:	230c      	movs	r3, #12
 80080a8:	6033      	str	r3, [r6, #0]
 80080aa:	2000      	movs	r0, #0
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
 80080ae:	f000 f87d 	bl	80081ac <__malloc_lock>
 80080b2:	4a21      	ldr	r2, [pc, #132]	; (8008138 <_malloc_r+0xac>)
 80080b4:	6814      	ldr	r4, [r2, #0]
 80080b6:	4621      	mov	r1, r4
 80080b8:	b991      	cbnz	r1, 80080e0 <_malloc_r+0x54>
 80080ba:	4c20      	ldr	r4, [pc, #128]	; (800813c <_malloc_r+0xb0>)
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	b91b      	cbnz	r3, 80080c8 <_malloc_r+0x3c>
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f863 	bl	800818c <_sbrk_r>
 80080c6:	6020      	str	r0, [r4, #0]
 80080c8:	4629      	mov	r1, r5
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 f85e 	bl	800818c <_sbrk_r>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d124      	bne.n	800811e <_malloc_r+0x92>
 80080d4:	230c      	movs	r3, #12
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 f868 	bl	80081ae <__malloc_unlock>
 80080de:	e7e4      	b.n	80080aa <_malloc_r+0x1e>
 80080e0:	680b      	ldr	r3, [r1, #0]
 80080e2:	1b5b      	subs	r3, r3, r5
 80080e4:	d418      	bmi.n	8008118 <_malloc_r+0x8c>
 80080e6:	2b0b      	cmp	r3, #11
 80080e8:	d90f      	bls.n	800810a <_malloc_r+0x7e>
 80080ea:	600b      	str	r3, [r1, #0]
 80080ec:	50cd      	str	r5, [r1, r3]
 80080ee:	18cc      	adds	r4, r1, r3
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f85c 	bl	80081ae <__malloc_unlock>
 80080f6:	f104 000b 	add.w	r0, r4, #11
 80080fa:	1d23      	adds	r3, r4, #4
 80080fc:	f020 0007 	bic.w	r0, r0, #7
 8008100:	1ac3      	subs	r3, r0, r3
 8008102:	d0d3      	beq.n	80080ac <_malloc_r+0x20>
 8008104:	425a      	negs	r2, r3
 8008106:	50e2      	str	r2, [r4, r3]
 8008108:	e7d0      	b.n	80080ac <_malloc_r+0x20>
 800810a:	428c      	cmp	r4, r1
 800810c:	684b      	ldr	r3, [r1, #4]
 800810e:	bf16      	itet	ne
 8008110:	6063      	strne	r3, [r4, #4]
 8008112:	6013      	streq	r3, [r2, #0]
 8008114:	460c      	movne	r4, r1
 8008116:	e7eb      	b.n	80080f0 <_malloc_r+0x64>
 8008118:	460c      	mov	r4, r1
 800811a:	6849      	ldr	r1, [r1, #4]
 800811c:	e7cc      	b.n	80080b8 <_malloc_r+0x2c>
 800811e:	1cc4      	adds	r4, r0, #3
 8008120:	f024 0403 	bic.w	r4, r4, #3
 8008124:	42a0      	cmp	r0, r4
 8008126:	d005      	beq.n	8008134 <_malloc_r+0xa8>
 8008128:	1a21      	subs	r1, r4, r0
 800812a:	4630      	mov	r0, r6
 800812c:	f000 f82e 	bl	800818c <_sbrk_r>
 8008130:	3001      	adds	r0, #1
 8008132:	d0cf      	beq.n	80080d4 <_malloc_r+0x48>
 8008134:	6025      	str	r5, [r4, #0]
 8008136:	e7db      	b.n	80080f0 <_malloc_r+0x64>
 8008138:	200000e0 	.word	0x200000e0
 800813c:	200000e4 	.word	0x200000e4

08008140 <_realloc_r>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	4607      	mov	r7, r0
 8008144:	4614      	mov	r4, r2
 8008146:	460e      	mov	r6, r1
 8008148:	b921      	cbnz	r1, 8008154 <_realloc_r+0x14>
 800814a:	4611      	mov	r1, r2
 800814c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008150:	f7ff bf9c 	b.w	800808c <_malloc_r>
 8008154:	b922      	cbnz	r2, 8008160 <_realloc_r+0x20>
 8008156:	f7ff ff4b 	bl	8007ff0 <_free_r>
 800815a:	4625      	mov	r5, r4
 800815c:	4628      	mov	r0, r5
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	f000 f826 	bl	80081b0 <_malloc_usable_size_r>
 8008164:	42a0      	cmp	r0, r4
 8008166:	d20f      	bcs.n	8008188 <_realloc_r+0x48>
 8008168:	4621      	mov	r1, r4
 800816a:	4638      	mov	r0, r7
 800816c:	f7ff ff8e 	bl	800808c <_malloc_r>
 8008170:	4605      	mov	r5, r0
 8008172:	2800      	cmp	r0, #0
 8008174:	d0f2      	beq.n	800815c <_realloc_r+0x1c>
 8008176:	4631      	mov	r1, r6
 8008178:	4622      	mov	r2, r4
 800817a:	f7ff fc11 	bl	80079a0 <memcpy>
 800817e:	4631      	mov	r1, r6
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ff35 	bl	8007ff0 <_free_r>
 8008186:	e7e9      	b.n	800815c <_realloc_r+0x1c>
 8008188:	4635      	mov	r5, r6
 800818a:	e7e7      	b.n	800815c <_realloc_r+0x1c>

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4c06      	ldr	r4, [pc, #24]	; (80081a8 <_sbrk_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4605      	mov	r5, r0
 8008194:	4608      	mov	r0, r1
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	f7f9 fb64 	bl	8001864 <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20004358 	.word	0x20004358

080081ac <__malloc_lock>:
 80081ac:	4770      	bx	lr

080081ae <__malloc_unlock>:
 80081ae:	4770      	bx	lr

080081b0 <_malloc_usable_size_r>:
 80081b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b4:	1f18      	subs	r0, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfbc      	itt	lt
 80081ba:	580b      	ldrlt	r3, [r1, r0]
 80081bc:	18c0      	addlt	r0, r0, r3
 80081be:	4770      	bx	lr

080081c0 <_init>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr

080081cc <_fini>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr
